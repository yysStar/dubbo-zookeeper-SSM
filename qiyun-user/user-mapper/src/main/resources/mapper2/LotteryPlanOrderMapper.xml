<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qiyun.mapper2.LotteryPlanOrderMapper" >
  <resultMap id="BaseResultMap" type="com.qiyun.model2.LotteryPlanOrder" >
    <id column="ORDER_NO" property="orderNo" jdbcType="INTEGER" />
    <result column="PLAN_NO" property="planNo" jdbcType="INTEGER" />
    <result column="ACCOUNT" property="account" jdbcType="VARCHAR" />
    <result column="BUY_TYPE" property="buyType" jdbcType="INTEGER" />
    <result column="CREATE_DATE_TIME" property="createDateTime" jdbcType="TIMESTAMP" />
    <result column="STATUS" property="status" jdbcType="INTEGER" />
    <result column="PART" property="part" jdbcType="INTEGER" />
    <result column="AMOUNT" property="amount" jdbcType="INTEGER" />
    <result column="POSTTAX_PRIZE" property="posttaxPrize" jdbcType="DOUBLE" />
    <result column="PRIZE_SETTLE_STATUS" property="prizeSettleStatus" jdbcType="INTEGER" />
    <result column="PRIZE_SETTLE_DATE_TIME" property="prizeSettleDateTime" jdbcType="TIMESTAMP" />
    <result column="SCORE" property="score" jdbcType="INTEGER" />
    <result column="EXPERIENCE" property="experience" jdbcType="INTEGER" />
    <result column="VERIFY_MD5" property="verifyMd5" jdbcType="VARCHAR" />
    <result column="RETURN_AMOUNT_DATE_TIME" property="returnAmountDateTime" jdbcType="TIMESTAMP" />
    <result column="MEMBER_ID" property="memberId" jdbcType="INTEGER" />
    <result column="WALLET_TYPE" property="walletType" jdbcType="INTEGER" />
    <result column="following_type" property="followingType" jdbcType="INTEGER" />
    <result column="platform" property="platform" jdbcType="INTEGER" />
    <result column="gold" property="gold" jdbcType="DOUBLE" />
    <result column="sum_gold" property="sumGold" jdbcType="DOUBLE" />
    <result column="web_site_gold" property="webSiteGold" jdbcType="DOUBLE" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ORDER_NO, PLAN_NO, ACCOUNT, BUY_TYPE, CREATE_DATE_TIME, STATUS, PART, AMOUNT, POSTTAX_PRIZE, 
    PRIZE_SETTLE_STATUS, PRIZE_SETTLE_DATE_TIME, SCORE, EXPERIENCE, VERIFY_MD5, RETURN_AMOUNT_DATE_TIME, 
    MEMBER_ID, WALLET_TYPE, following_type, platform, gold, sum_gold, web_site_gold
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.qiyun.model2.LotteryPlanOrderExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from lottery_plan_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from lottery_plan_order
    where ORDER_NO = #{orderNo,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from lottery_plan_order
    where ORDER_NO = #{orderNo,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qiyun.model2.LotteryPlanOrder" >
    insert into lottery_plan_order (ORDER_NO, PLAN_NO, ACCOUNT, 
      BUY_TYPE, CREATE_DATE_TIME, STATUS, 
      PART, AMOUNT, POSTTAX_PRIZE, 
      PRIZE_SETTLE_STATUS, PRIZE_SETTLE_DATE_TIME, 
      SCORE, EXPERIENCE, VERIFY_MD5, 
      RETURN_AMOUNT_DATE_TIME, MEMBER_ID, WALLET_TYPE, 
      following_type, platform, gold, 
      sum_gold, web_site_gold)
    values (#{orderNo,jdbcType=INTEGER}, #{planNo,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, 
      #{buyType,jdbcType=INTEGER}, #{createDateTime,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER}, 
      #{part,jdbcType=INTEGER}, #{amount,jdbcType=INTEGER}, #{posttaxPrize,jdbcType=DOUBLE}, 
      #{prizeSettleStatus,jdbcType=INTEGER}, #{prizeSettleDateTime,jdbcType=TIMESTAMP}, 
      #{score,jdbcType=INTEGER}, #{experience,jdbcType=INTEGER}, #{verifyMd5,jdbcType=VARCHAR}, 
      #{returnAmountDateTime,jdbcType=TIMESTAMP}, #{memberId,jdbcType=INTEGER}, #{walletType,jdbcType=INTEGER}, 
      #{followingType,jdbcType=INTEGER}, #{platform,jdbcType=INTEGER}, #{gold,jdbcType=DOUBLE}, 
      #{sumGold,jdbcType=DOUBLE}, #{webSiteGold,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="com.qiyun.model2.LotteryPlanOrder" >
    insert into lottery_plan_order
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderNo != null" >
        ORDER_NO,
      </if>
      <if test="planNo != null" >
        PLAN_NO,
      </if>
      <if test="account != null" >
        ACCOUNT,
      </if>
      <if test="buyType != null" >
        BUY_TYPE,
      </if>
      <if test="createDateTime != null" >
        CREATE_DATE_TIME,
      </if>
      <if test="status != null" >
        STATUS,
      </if>
      <if test="part != null" >
        PART,
      </if>
      <if test="amount != null" >
        AMOUNT,
      </if>
      <if test="posttaxPrize != null" >
        POSTTAX_PRIZE,
      </if>
      <if test="prizeSettleStatus != null" >
        PRIZE_SETTLE_STATUS,
      </if>
      <if test="prizeSettleDateTime != null" >
        PRIZE_SETTLE_DATE_TIME,
      </if>
      <if test="score != null" >
        SCORE,
      </if>
      <if test="experience != null" >
        EXPERIENCE,
      </if>
      <if test="verifyMd5 != null" >
        VERIFY_MD5,
      </if>
      <if test="returnAmountDateTime != null" >
        RETURN_AMOUNT_DATE_TIME,
      </if>
      <if test="memberId != null" >
        MEMBER_ID,
      </if>
      <if test="walletType != null" >
        WALLET_TYPE,
      </if>
      <if test="followingType != null" >
        following_type,
      </if>
      <if test="platform != null" >
        platform,
      </if>
      <if test="gold != null" >
        gold,
      </if>
      <if test="sumGold != null" >
        sum_gold,
      </if>
      <if test="webSiteGold != null" >
        web_site_gold,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderNo != null" >
        #{orderNo,jdbcType=INTEGER},
      </if>
      <if test="planNo != null" >
        #{planNo,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="buyType != null" >
        #{buyType,jdbcType=INTEGER},
      </if>
      <if test="createDateTime != null" >
        #{createDateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="part != null" >
        #{part,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=INTEGER},
      </if>
      <if test="posttaxPrize != null" >
        #{posttaxPrize,jdbcType=DOUBLE},
      </if>
      <if test="prizeSettleStatus != null" >
        #{prizeSettleStatus,jdbcType=INTEGER},
      </if>
      <if test="prizeSettleDateTime != null" >
        #{prizeSettleDateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="score != null" >
        #{score,jdbcType=INTEGER},
      </if>
      <if test="experience != null" >
        #{experience,jdbcType=INTEGER},
      </if>
      <if test="verifyMd5 != null" >
        #{verifyMd5,jdbcType=VARCHAR},
      </if>
      <if test="returnAmountDateTime != null" >
        #{returnAmountDateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="memberId != null" >
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="walletType != null" >
        #{walletType,jdbcType=INTEGER},
      </if>
      <if test="followingType != null" >
        #{followingType,jdbcType=INTEGER},
      </if>
      <if test="platform != null" >
        #{platform,jdbcType=INTEGER},
      </if>
      <if test="gold != null" >
        #{gold,jdbcType=DOUBLE},
      </if>
      <if test="sumGold != null" >
        #{sumGold,jdbcType=DOUBLE},
      </if>
      <if test="webSiteGold != null" >
        #{webSiteGold,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qiyun.model2.LotteryPlanOrder" >
    update lottery_plan_order
    <set >
      <if test="planNo != null" >
        PLAN_NO = #{planNo,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        ACCOUNT = #{account,jdbcType=VARCHAR},
      </if>
      <if test="buyType != null" >
        BUY_TYPE = #{buyType,jdbcType=INTEGER},
      </if>
      <if test="createDateTime != null" >
        CREATE_DATE_TIME = #{createDateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        STATUS = #{status,jdbcType=INTEGER},
      </if>
      <if test="part != null" >
        PART = #{part,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        AMOUNT = #{amount,jdbcType=INTEGER},
      </if>
      <if test="posttaxPrize != null" >
        POSTTAX_PRIZE = #{posttaxPrize,jdbcType=DOUBLE},
      </if>
      <if test="prizeSettleStatus != null" >
        PRIZE_SETTLE_STATUS = #{prizeSettleStatus,jdbcType=INTEGER},
      </if>
      <if test="prizeSettleDateTime != null" >
        PRIZE_SETTLE_DATE_TIME = #{prizeSettleDateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="score != null" >
        SCORE = #{score,jdbcType=INTEGER},
      </if>
      <if test="experience != null" >
        EXPERIENCE = #{experience,jdbcType=INTEGER},
      </if>
      <if test="verifyMd5 != null" >
        VERIFY_MD5 = #{verifyMd5,jdbcType=VARCHAR},
      </if>
      <if test="returnAmountDateTime != null" >
        RETURN_AMOUNT_DATE_TIME = #{returnAmountDateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="memberId != null" >
        MEMBER_ID = #{memberId,jdbcType=INTEGER},
      </if>
      <if test="walletType != null" >
        WALLET_TYPE = #{walletType,jdbcType=INTEGER},
      </if>
      <if test="followingType != null" >
        following_type = #{followingType,jdbcType=INTEGER},
      </if>
      <if test="platform != null" >
        platform = #{platform,jdbcType=INTEGER},
      </if>
      <if test="gold != null" >
        gold = #{gold,jdbcType=DOUBLE},
      </if>
      <if test="sumGold != null" >
        sum_gold = #{sumGold,jdbcType=DOUBLE},
      </if>
      <if test="webSiteGold != null" >
        web_site_gold = #{webSiteGold,jdbcType=DOUBLE},
      </if>
    </set>
    where ORDER_NO = #{orderNo,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qiyun.model2.LotteryPlanOrder" >
    update lottery_plan_order
    set PLAN_NO = #{planNo,jdbcType=INTEGER},
      ACCOUNT = #{account,jdbcType=VARCHAR},
      BUY_TYPE = #{buyType,jdbcType=INTEGER},
      CREATE_DATE_TIME = #{createDateTime,jdbcType=TIMESTAMP},
      STATUS = #{status,jdbcType=INTEGER},
      PART = #{part,jdbcType=INTEGER},
      AMOUNT = #{amount,jdbcType=INTEGER},
      POSTTAX_PRIZE = #{posttaxPrize,jdbcType=DOUBLE},
      PRIZE_SETTLE_STATUS = #{prizeSettleStatus,jdbcType=INTEGER},
      PRIZE_SETTLE_DATE_TIME = #{prizeSettleDateTime,jdbcType=TIMESTAMP},
      SCORE = #{score,jdbcType=INTEGER},
      EXPERIENCE = #{experience,jdbcType=INTEGER},
      VERIFY_MD5 = #{verifyMd5,jdbcType=VARCHAR},
      RETURN_AMOUNT_DATE_TIME = #{returnAmountDateTime,jdbcType=TIMESTAMP},
      MEMBER_ID = #{memberId,jdbcType=INTEGER},
      WALLET_TYPE = #{walletType,jdbcType=INTEGER},
      following_type = #{followingType,jdbcType=INTEGER},
      platform = #{platform,jdbcType=INTEGER},
      gold = #{gold,jdbcType=DOUBLE},
      sum_gold = #{sumGold,jdbcType=DOUBLE},
      web_site_gold = #{webSiteGold,jdbcType=DOUBLE}
    where ORDER_NO = #{orderNo,jdbcType=INTEGER}
  </update>
  <select id="selectTenByAccount" resultMap="BaseResultMap" parameterType="java.lang.String">
    SELECT
        LPO.*
    FROM
        lottery_plan_order LPO
    LEFT JOIN lottery_plan LP ON LPO.PLAN_NO = LP.PLAN_NO
    WHERE
        LPO.ACCOUNT = #{account,jdbcType=VARCHAR}
    AND LP.WIN_STATUS != 1
    AND LPO.`STATUS` = 2
    AND LP.PUBLIC_STATUS != 1
    AND LP.IS_SUPER_MAN = 1
    ORDER BY
        LPO.CREATE_DATE_TIME DESC
    LIMIT 10
  </select>
  <resultMap id="planDTO" type="com.qiyun.dto.PlanDTO" >
    <result column="PLAN_NO" property="planNo" jdbcType="INTEGER" />
    <result column="name" property="lotteryType" jdbcType="VARCHAR" />
    <result column="people_num" property="peopleNum" jdbcType="INTEGER" />
    <result column="all_buy_money" property="allBuyMoney" jdbcType="INTEGER" />
    <result column="unit_price" property="unitPrice" jdbcType="INTEGER" />
    <result column="AMOUNT" property="amount" jdbcType="INTEGER" />
    <result column="SUMAMOUNT" property="sumAmount" jdbcType="INTEGER" />
    <result column="POSTTAX_PRIZE" property="bingoMoney" jdbcType="DECIMAL" />
  </resultMap>
  <select id="selectPlayingPlan" resultMap="planDTO">
    SELECT
        IFNULL(AM.people_num, 0)  AS people_num,
        IFNULL(AM.all_buy_money, 0) + LP.AMOUNT AS all_buy_money,
        LP.AMOUNT / LP.MULTIPLE AS unit_price,
        LT.`name`,
        LPO.POSTTAX_PRIZE,
        LP.PLAN_NO,
        LP.AMOUNT,
        LP.SUMAMOUNT
    FROM
        lottery_plan_order LPO
    LEFT JOIN lottery_plan LP ON LPO.PLAN_NO = LP.PLAN_NO
    LEFT JOIN lottery_type LT ON LP.LOTTERY_TYPE = LT.id
    LEFT JOIN (
        SELECT
            COUNT(PLAN_NO) AS people_num,
            SUM(AMOUNT) AS all_buy_money,
            planNo_copyDocumentary
        FROM
            lottery_plan
        WHERE
            1 = 1
        GROUP BY
            planNo_copyDocumentary
    ) AM ON LP.PLAN_NO = AM.planNo_copyDocumentary
    WHERE
        LPO.CREATE_DATE_TIME > DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
    AND LP.ACCOUNT = #{account,jdbcType=VARCHAR}
    AND LPO.`STATUS` = 2
    AND LP.WIN_STATUS = 1
    AND LP.IS_SUPER_MAN = 1
    AND LP.PUBLIC_STATUS != 1
    AND LP.DEAL_DATE_TIME > NOW()
    GROUP BY
        LP.PLAN_NO
    ORDER BY
        LP.CREATE_DATE_TIME DESC
    <if test="s == null or s == ''">
      LIMIT 20
    </if>
  </select>
  <select id="selectBingoPlan" resultMap="planDTO">
    SELECT
        IFNULL(AM.people_num, 0) AS people_num,
        IFNULL(AM.all_buy_money, 0) + LP.AMOUNT AS all_buy_money,
        LP.AMOUNT / LP.MULTIPLE AS unit_price,
        LT.`name`,
        LPO.POSTTAX_PRIZE,
        LP.PLAN_NO,
        LP.AMOUNT,
        LP.SUMAMOUNT
    FROM
        lottery_plan_order LPO
    LEFT JOIN lottery_plan LP ON LPO.PLAN_NO = LP.PLAN_NO
    LEFT JOIN lottery_type LT ON LP.LOTTERY_TYPE = LT.id
    LEFT JOIN (
        SELECT
            COUNT(PLAN_NO) AS people_num,
            SUM(AMOUNT) AS all_buy_money,
            planNo_copyDocumentary
        FROM
            lottery_plan
        WHERE
            1 = 1
        GROUP BY
            planNo_copyDocumentary
    ) AM ON LP.PLAN_NO = AM.planNo_copyDocumentary
    WHERE
        LPO.CREATE_DATE_TIME > DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
    AND LP.ACCOUNT = #{account,jdbcType=VARCHAR}
    AND LPO.`STATUS` = 2
    AND LP.WIN_STATUS = 4
    AND LP.IS_SUPER_MAN = 1
    AND LP.PUBLIC_STATUS != 1
    GROUP BY
        LP.PLAN_NO
    ORDER BY
        LP.CREATE_DATE_TIME DESC
    <if test="s == null or s == ''">
      LIMIT 20
    </if>
  </select>
  <select id="selectFinishPlan" resultMap="planDTO">
    SELECT
        IFNULL(AM.people_num, 0) AS people_num,
        IFNULL(AM.all_buy_money, 0) + LP.AMOUNT AS all_buy_money,
        LP.AMOUNT / LP.MULTIPLE AS unit_price,
        LT.`name`,
        LP.POSTTAX_PRIZE,
        LP.PLAN_NO,
        LP.AMOUNT,
        LP.SUMAMOUNT
    FROM
        lottery_plan_order LPO
    LEFT JOIN lottery_plan LP ON LPO.PLAN_NO = LP.PLAN_NO
    LEFT JOIN lottery_type LT ON LP.LOTTERY_TYPE = LT.id
    LEFT JOIN (
        SELECT
            COUNT(PLAN_NO) AS people_num,
            SUM(AMOUNT) AS all_buy_money,
            planNo_copyDocumentary
        FROM
            lottery_plan
        WHERE
            1 = 1
        GROUP BY
            planNo_copyDocumentary
    ) AM ON LP.PLAN_NO = AM.planNo_copyDocumentary
    WHERE
        LPO.CREATE_DATE_TIME > DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
    AND LP.ACCOUNT = #{account,jdbcType=VARCHAR}
    AND LPO.`STATUS` = 2
    AND LP.IS_SUPER_MAN = 1
    AND LP.PLAN_STATUS = 4
    AND LP.WIN_STATUS != 1
    AND LP.PUBLIC_STATUS != 1
    GROUP BY
        LP.PLAN_NO
    ORDER BY
        LP.CREATE_DATE_TIME DESC
    <if test="s == null or s == ''">
        LIMIT 20
    </if>
  </select>
  <select id="selectShowPlan" resultMap="planDTO">
    SELECT
        IFNULL(AM.people_num, 0) AS people_num,
        IFNULL(AM.all_buy_money, 0) + LP.AMOUNT AS all_buy_money,
        LP.AMOUNT / LP.MULTIPLE AS unit_price,
        LT.`name`,
        LPO.POSTTAX_PRIZE,
        LP.PLAN_NO,
        LP.AMOUNT,
        LP.SUMAMOUNT
    FROM
        plan_show PS
    LEFT JOIN lottery_plan LP ON PS.plan_no = LP.PLAN_NO
    LEFT JOIN lottery_plan_order LPO ON LP.PLAN_NO = LPO.PLAN_NO
    LEFT JOIN lottery_type LT ON LP.LOTTERY_TYPE = LT.id
    LEFT JOIN (
        SELECT
            COUNT(PLAN_NO) AS people_num,
            SUM(AMOUNT) AS all_buy_money,
            planNo_copyDocumentary
        FROM
            lottery_plan
        WHERE
            1 = 1
        GROUP BY
            planNo_copyDocumentary
    ) AM ON LP.PLAN_NO = AM.planNo_copyDocumentary
    WHERE
        LPO.CREATE_DATE_TIME > DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
    AND PS.account = #{account,jdbcType=VARCHAR}
    AND LPO.`STATUS` = 2
    AND LP.IS_SUPER_MAN = 1
    AND LP.PLAN_STATUS = 4
    AND LP.WIN_STATUS != 1
    AND PS.type = 1
    AND PS. STATUS = 1
    AND LP.PUBLIC_STATUS != 1
    GROUP BY
        PS.id
    ORDER BY
        LP.CREATE_DATE_TIME DESC
    <if test="s == null or s == ''">
      LIMIT 20
    </if>
  </select>
</mapper>