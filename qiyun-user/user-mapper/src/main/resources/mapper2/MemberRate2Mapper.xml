<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qiyun.mapper2.MemberRate2Mapper" >
  <resultMap id="BaseResultMap" type="com.qiyun.model2.MemberRate2" >
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="MEMBER_ID" property="memberId" jdbcType="INTEGER" />
    <result column="ACCOUNT" property="account" jdbcType="VARCHAR" />
    <result column="LOTTERY_TYPE" property="lotteryType" jdbcType="INTEGER" />
    <result column="CREATE_DATE" property="createDate" jdbcType="TIMESTAMP" />
    <result column="RETURN_POINT_TYPE" property="returnPointType" jdbcType="INTEGER" />
    <result column="JJ_DG_RATE" property="jjDgRate" jdbcType="DOUBLE" />
    <result column="JJ_HM_RATE" property="jjHmRate" jdbcType="DOUBLE" />
    <result column="FD_DG_RATE" property="fdDgRate" jdbcType="DOUBLE" />
    <result column="FD_HM_RATE" property="fdHmRate" jdbcType="DOUBLE" />
    <result column="RATE_CREATE_DATE" property="rateCreateDate" jdbcType="TIMESTAMP" />
    <result column="RATE_END_DATE" property="rateEndDate" jdbcType="TIMESTAMP" />
    <result column="IS_SET_RATE" property="isSetRate" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.qiyun.model2.MemberRate2WithBLOBs" extends="BaseResultMap" >
    <result column="DG_RATE" property="dgRate" jdbcType="LONGVARCHAR" />
    <result column="HM_RATE" property="hmRate" jdbcType="LONGVARCHAR" />
    <result column="APPLY_REMARK" property="applyRemark" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, MEMBER_ID, ACCOUNT, LOTTERY_TYPE, CREATE_DATE, RETURN_POINT_TYPE, JJ_DG_RATE, 
    JJ_HM_RATE, FD_DG_RATE, FD_HM_RATE, RATE_CREATE_DATE, RATE_END_DATE, IS_SET_RATE
  </sql>
  <sql id="Blob_Column_List" >
    DG_RATE, HM_RATE, APPLY_REMARK
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.qiyun.model2.MemberRate2Query" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from member_rate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.qiyun.model2.MemberRate2Query" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member_rate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from member_rate
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from member_rate
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.qiyun.model2.MemberRate2Query" >
    delete from member_rate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qiyun.model2.MemberRate2WithBLOBs" >
    insert into member_rate (ID, MEMBER_ID, ACCOUNT, 
      LOTTERY_TYPE, CREATE_DATE, RETURN_POINT_TYPE, 
      JJ_DG_RATE, JJ_HM_RATE, FD_DG_RATE, 
      FD_HM_RATE, RATE_CREATE_DATE, RATE_END_DATE, 
      IS_SET_RATE, DG_RATE, HM_RATE, 
      APPLY_REMARK)
    values (#{id,jdbcType=INTEGER}, #{memberId,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, 
      #{lotteryType,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, #{returnPointType,jdbcType=INTEGER}, 
      #{jjDgRate,jdbcType=DOUBLE}, #{jjHmRate,jdbcType=DOUBLE}, #{fdDgRate,jdbcType=DOUBLE}, 
      #{fdHmRate,jdbcType=DOUBLE}, #{rateCreateDate,jdbcType=TIMESTAMP}, #{rateEndDate,jdbcType=TIMESTAMP}, 
      #{isSetRate,jdbcType=INTEGER}, #{dgRate,jdbcType=LONGVARCHAR}, #{hmRate,jdbcType=LONGVARCHAR}, 
      #{applyRemark,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.qiyun.model2.MemberRate2WithBLOBs" >
    insert into member_rate
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="memberId != null" >
        MEMBER_ID,
      </if>
      <if test="account != null" >
        ACCOUNT,
      </if>
      <if test="lotteryType != null" >
        LOTTERY_TYPE,
      </if>
      <if test="createDate != null" >
        CREATE_DATE,
      </if>
      <if test="returnPointType != null" >
        RETURN_POINT_TYPE,
      </if>
      <if test="jjDgRate != null" >
        JJ_DG_RATE,
      </if>
      <if test="jjHmRate != null" >
        JJ_HM_RATE,
      </if>
      <if test="fdDgRate != null" >
        FD_DG_RATE,
      </if>
      <if test="fdHmRate != null" >
        FD_HM_RATE,
      </if>
      <if test="rateCreateDate != null" >
        RATE_CREATE_DATE,
      </if>
      <if test="rateEndDate != null" >
        RATE_END_DATE,
      </if>
      <if test="isSetRate != null" >
        IS_SET_RATE,
      </if>
      <if test="dgRate != null" >
        DG_RATE,
      </if>
      <if test="hmRate != null" >
        HM_RATE,
      </if>
      <if test="applyRemark != null" >
        APPLY_REMARK,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="memberId != null" >
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="lotteryType != null" >
        #{lotteryType,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="returnPointType != null" >
        #{returnPointType,jdbcType=INTEGER},
      </if>
      <if test="jjDgRate != null" >
        #{jjDgRate,jdbcType=DOUBLE},
      </if>
      <if test="jjHmRate != null" >
        #{jjHmRate,jdbcType=DOUBLE},
      </if>
      <if test="fdDgRate != null" >
        #{fdDgRate,jdbcType=DOUBLE},
      </if>
      <if test="fdHmRate != null" >
        #{fdHmRate,jdbcType=DOUBLE},
      </if>
      <if test="rateCreateDate != null" >
        #{rateCreateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="rateEndDate != null" >
        #{rateEndDate,jdbcType=TIMESTAMP},
      </if>
      <if test="isSetRate != null" >
        #{isSetRate,jdbcType=INTEGER},
      </if>
      <if test="dgRate != null" >
        #{dgRate,jdbcType=LONGVARCHAR},
      </if>
      <if test="hmRate != null" >
        #{hmRate,jdbcType=LONGVARCHAR},
      </if>
      <if test="applyRemark != null" >
        #{applyRemark,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.qiyun.model2.MemberRate2Query" resultType="java.lang.Integer" >
    select count(*) from member_rate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update member_rate
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.memberId != null" >
        MEMBER_ID = #{record.memberId,jdbcType=INTEGER},
      </if>
      <if test="record.account != null" >
        ACCOUNT = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.lotteryType != null" >
        LOTTERY_TYPE = #{record.lotteryType,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null" >
        CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.returnPointType != null" >
        RETURN_POINT_TYPE = #{record.returnPointType,jdbcType=INTEGER},
      </if>
      <if test="record.jjDgRate != null" >
        JJ_DG_RATE = #{record.jjDgRate,jdbcType=DOUBLE},
      </if>
      <if test="record.jjHmRate != null" >
        JJ_HM_RATE = #{record.jjHmRate,jdbcType=DOUBLE},
      </if>
      <if test="record.fdDgRate != null" >
        FD_DG_RATE = #{record.fdDgRate,jdbcType=DOUBLE},
      </if>
      <if test="record.fdHmRate != null" >
        FD_HM_RATE = #{record.fdHmRate,jdbcType=DOUBLE},
      </if>
      <if test="record.rateCreateDate != null" >
        RATE_CREATE_DATE = #{record.rateCreateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.rateEndDate != null" >
        RATE_END_DATE = #{record.rateEndDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isSetRate != null" >
        IS_SET_RATE = #{record.isSetRate,jdbcType=INTEGER},
      </if>
      <if test="record.dgRate != null" >
        DG_RATE = #{record.dgRate,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.hmRate != null" >
        HM_RATE = #{record.hmRate,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.applyRemark != null" >
        APPLY_REMARK = #{record.applyRemark,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update member_rate
    set ID = #{record.id,jdbcType=INTEGER},
      MEMBER_ID = #{record.memberId,jdbcType=INTEGER},
      ACCOUNT = #{record.account,jdbcType=VARCHAR},
      LOTTERY_TYPE = #{record.lotteryType,jdbcType=INTEGER},
      CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP},
      RETURN_POINT_TYPE = #{record.returnPointType,jdbcType=INTEGER},
      JJ_DG_RATE = #{record.jjDgRate,jdbcType=DOUBLE},
      JJ_HM_RATE = #{record.jjHmRate,jdbcType=DOUBLE},
      FD_DG_RATE = #{record.fdDgRate,jdbcType=DOUBLE},
      FD_HM_RATE = #{record.fdHmRate,jdbcType=DOUBLE},
      RATE_CREATE_DATE = #{record.rateCreateDate,jdbcType=TIMESTAMP},
      RATE_END_DATE = #{record.rateEndDate,jdbcType=TIMESTAMP},
      IS_SET_RATE = #{record.isSetRate,jdbcType=INTEGER},
      DG_RATE = #{record.dgRate,jdbcType=LONGVARCHAR},
      HM_RATE = #{record.hmRate,jdbcType=LONGVARCHAR},
      APPLY_REMARK = #{record.applyRemark,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update member_rate
    set ID = #{record.id,jdbcType=INTEGER},
      MEMBER_ID = #{record.memberId,jdbcType=INTEGER},
      ACCOUNT = #{record.account,jdbcType=VARCHAR},
      LOTTERY_TYPE = #{record.lotteryType,jdbcType=INTEGER},
      CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP},
      RETURN_POINT_TYPE = #{record.returnPointType,jdbcType=INTEGER},
      JJ_DG_RATE = #{record.jjDgRate,jdbcType=DOUBLE},
      JJ_HM_RATE = #{record.jjHmRate,jdbcType=DOUBLE},
      FD_DG_RATE = #{record.fdDgRate,jdbcType=DOUBLE},
      FD_HM_RATE = #{record.fdHmRate,jdbcType=DOUBLE},
      RATE_CREATE_DATE = #{record.rateCreateDate,jdbcType=TIMESTAMP},
      RATE_END_DATE = #{record.rateEndDate,jdbcType=TIMESTAMP},
      IS_SET_RATE = #{record.isSetRate,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.qiyun.model2.MemberRate2WithBLOBs" >
    update member_rate
    <set >
      <if test="memberId != null" >
        MEMBER_ID = #{memberId,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        ACCOUNT = #{account,jdbcType=VARCHAR},
      </if>
      <if test="lotteryType != null" >
        LOTTERY_TYPE = #{lotteryType,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="returnPointType != null" >
        RETURN_POINT_TYPE = #{returnPointType,jdbcType=INTEGER},
      </if>
      <if test="jjDgRate != null" >
        JJ_DG_RATE = #{jjDgRate,jdbcType=DOUBLE},
      </if>
      <if test="jjHmRate != null" >
        JJ_HM_RATE = #{jjHmRate,jdbcType=DOUBLE},
      </if>
      <if test="fdDgRate != null" >
        FD_DG_RATE = #{fdDgRate,jdbcType=DOUBLE},
      </if>
      <if test="fdHmRate != null" >
        FD_HM_RATE = #{fdHmRate,jdbcType=DOUBLE},
      </if>
      <if test="rateCreateDate != null" >
        RATE_CREATE_DATE = #{rateCreateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="rateEndDate != null" >
        RATE_END_DATE = #{rateEndDate,jdbcType=TIMESTAMP},
      </if>
      <if test="isSetRate != null" >
        IS_SET_RATE = #{isSetRate,jdbcType=INTEGER},
      </if>
      <if test="dgRate != null" >
        DG_RATE = #{dgRate,jdbcType=LONGVARCHAR},
      </if>
      <if test="hmRate != null" >
        HM_RATE = #{hmRate,jdbcType=LONGVARCHAR},
      </if>
      <if test="applyRemark != null" >
        APPLY_REMARK = #{applyRemark,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.qiyun.model2.MemberRate2WithBLOBs" >
    update member_rate
    set MEMBER_ID = #{memberId,jdbcType=INTEGER},
      ACCOUNT = #{account,jdbcType=VARCHAR},
      LOTTERY_TYPE = #{lotteryType,jdbcType=INTEGER},
      CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      RETURN_POINT_TYPE = #{returnPointType,jdbcType=INTEGER},
      JJ_DG_RATE = #{jjDgRate,jdbcType=DOUBLE},
      JJ_HM_RATE = #{jjHmRate,jdbcType=DOUBLE},
      FD_DG_RATE = #{fdDgRate,jdbcType=DOUBLE},
      FD_HM_RATE = #{fdHmRate,jdbcType=DOUBLE},
      RATE_CREATE_DATE = #{rateCreateDate,jdbcType=TIMESTAMP},
      RATE_END_DATE = #{rateEndDate,jdbcType=TIMESTAMP},
      IS_SET_RATE = #{isSetRate,jdbcType=INTEGER},
      DG_RATE = #{dgRate,jdbcType=LONGVARCHAR},
      HM_RATE = #{hmRate,jdbcType=LONGVARCHAR},
      APPLY_REMARK = #{applyRemark,jdbcType=LONGVARCHAR}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qiyun.model2.MemberRate2" >
    update member_rate
    set MEMBER_ID = #{memberId,jdbcType=INTEGER},
      ACCOUNT = #{account,jdbcType=VARCHAR},
      LOTTERY_TYPE = #{lotteryType,jdbcType=INTEGER},
      CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      RETURN_POINT_TYPE = #{returnPointType,jdbcType=INTEGER},
      JJ_DG_RATE = #{jjDgRate,jdbcType=DOUBLE},
      JJ_HM_RATE = #{jjHmRate,jdbcType=DOUBLE},
      FD_DG_RATE = #{fdDgRate,jdbcType=DOUBLE},
      FD_HM_RATE = #{fdHmRate,jdbcType=DOUBLE},
      RATE_CREATE_DATE = #{rateCreateDate,jdbcType=TIMESTAMP},
      RATE_END_DATE = #{rateEndDate,jdbcType=TIMESTAMP},
      IS_SET_RATE = #{isSetRate,jdbcType=INTEGER}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <select id="getMemberRate" resultType="Map">
    select mr.FD_DG_RATE,mr.LOTTERY_TYPE from member_rate mr,member m where m.account = mr.account and mr.LOTTERY_TYPE in (38,39,40,11) and m.account = #{0} and mr.RATE_END_DATE>NOW()
  </select>
  <select id="findAllRate" parameterType="string" resultType="map">

SELECT
	ma.ACCOUNT,
    mr.MEMBER_ID,
    ma.username,
	IFNULL(mr.LOTTERY_TYPE, 0) LOTTERY_TYPE,
    IFNULL(mr.id, 0) rate_id,
    IFNULL(mr.FD_DG_RATE, 0) FD_DG_RATE,
    IFNULL(mr.FD_HM_RATE, 0) FD_HM_RATE,
    IFNULL(mr.RATE_CREATE_DATE, 0) RATE_CREATE_DATE,
    IFNULL(mr.RATE_END_DATE, 0) RATE_END_DATE,
    IFNULL(mr.CREATE_DATE, 0) CREATE_DATE,
    IFNULL(mr.RETURN_POINT_TYPE, 0) RETURN_POINT_TYPE
FROM
    member_rate mr
    LEFT JOIN member ma ON ma.ACCOUNT = mr.ACCOUNT
WHERE
	1 = 1
  <if test="account!=null and account !=''">
    and ma.ACCOUNT=#{account}
  </if>
    order by mr.CREATE_DATE
  </select>
  <delete id="delRateByAccount" >

    delete from  member_rate where  ACCOUNT=#{account}
    <if test="lottery_type!=null and lottery_type!=''">
      and LOTTERY_TYPE=#{lottery_type}
    </if>
  </delete>
  <!--修改返点-->
  <update id="updateRateByAccount" parameterType="map">

    update  member_rate
    <set>
      <if test="dg_rate!=null and dg_rate!=''">
        FD_DG_RATE=#{dg_rate},
      </if>
      <if test="hm_rate!=null and hm_rate!=''">
        FD_HM_RATE=#{hm_rate},
      </if>
      <if test="startDate!=null and startDate!=''">
        RATE_CREATE_DATE=#{startDate},
      </if>
      <if test="endDate!=null and endDate!=''">
        RATE_END_DATE=#{endDate}
      </if>
    </set>
    WHERE ACCOUNT = #{account} and id=#{rate_id}
  </update>
  <update id="cancelFD" parameterType="java.lang.String">
    UPDATE  member_rate
    SET FD_DG_RATE = 0 ,FD_HM_RATE = 0,RATE_END_DATE = NOW()
    WHERE ACCOUNT = #{account}
  </update>
</mapper>
