package com.qiyun.model.basketball;

// Generated by MyEclipse Persistence Tools

import com.qiyun.grabber.basketball.EuropePKGainScale;
import com.qiyun.grabber.model.AbstractAward;
import com.qiyun.grabber.model.AbstractBasketballOp;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * FootballOp generated by MyEclipse Persistence Tools
 */
@SuppressWarnings("serial")
public class BasketballOp extends AbstractBasketballOp implements java.io.Serializable {
	public static final String AVG_COMPANY="平均值";
	public static final Map<String, String> COMAPNY=new HashMap<String, String>();
	static{
		COMAPNY.put("澳门", "aomen");
		COMAPNY.put( "立博","libo");
		COMAPNY.put("bet365","ribo");
		COMAPNY.put( "韦德","weide");
		COMAPNY.put("易胜博","yisheng");
		COMAPNY.put("皇冠","huangguan");
		COMAPNY.put(AVG_COMPANY,"avg");
	}
	// Constructors

	/** default constructor */
	public BasketballOp() {
	}

	/** minimal constructor */
	public BasketballOp(Integer matchId) {
		super(matchId);
	}

	/** full constructor */
	public BasketballOp(Integer matchId, Double home, Integer homeChange, Double guest, Integer guestChange, Integer isFirst, Date time) {
		super(matchId, home, homeChange, guest, guestChange, isFirst, time);
	}

	public Map<String, String> getJsonMap(BasketBallMatch match) {
		Map<String, String> tempMap = new HashMap<String, String>();

		tempMap.put("bz_" + match.getIntTime() + "_" + match.getLineId() + "_s", getHome() + "");
		tempMap.put("bz_" + match.getIntTime() + "_" + match.getLineId() + "_f", getGuest() + "");
		tempMap.put("bz_" + match.getIntTime() + "_" + match.getLineId() + "_sC", getHomeChange() + "");
		tempMap.put("bz_" + match.getIntTime() + "_" + match.getLineId() + "_fC", getGuestChange() + "");

		return tempMap;
	}

	public Map<String, String> getYlb(SFAward award) {

		Map<String, String> ylb = new HashMap<String, String>();
		if (award == null)
			return ylb;
		Double[] betScale = new Double[] { award.getWinOrBigAward(), award.getLoseOrSmallAward() };
		Double[] waterLevel = new Double[] { getHome(), getGuest() };
		String[] result = EuropePKGainScale.getGainScale(betScale, waterLevel);
		if (result[0] != null) {
			ylb.put("ylb_" + award.getIntTime() + "_" + award.getLineId() + "_bz_0", result[0]);
			ylb.put("ylb_" + award.getIntTime() + "_" + award.getLineId() + "_bz_1", result[1]);
			ylb.put("ylb_" + award.getIntTime() + "_" + award.getLineId() + "_bz_2", result[2]);
		} else {
			ylb.put("ylb_" + award.getIntTime() + "_" + award.getLineId() + "_bz_0", "");
			ylb.put("ylb_" + award.getIntTime() + "_" + award.getLineId() + "_bz_1", "");
			ylb.put("ylb_" + award.getIntTime() + "_" + award.getLineId() + "_bz_2", "");
		}
		return ylb;
	}

	public static Map<String, String> getYlbJsonMap(Map<Integer, BasketballOp> opMap, Map<Integer, AbstractAward> awardTzbMap,
			List<BasketBallMatch> raceList) {
		if (opMap == null || opMap.isEmpty() || awardTzbMap == null || awardTzbMap.isEmpty())
			return null;
		Map<String, String> resultMap = new HashMap<String, String>();
		for (BasketBallMatch bb : raceList) {
			BasketballOp op = opMap.get(bb.getId());
			SFAward award = (SFAward) awardTzbMap.get(bb.getId());
			if (op != null && award != null) {
				resultMap.putAll(op.getYlb(award));
			}
		}
		return resultMap;
	}
	public void checkChangeStatus(BasketballOp beforOp){
		this.setHomeChange(getSWchange(this.getHome(),beforOp.getHome()));
		this.setGuestChange(getSWchange(this.getGuest(),beforOp.getGuest()));
	}
	public int getSWchange(Double d1, Double d2) {
		if (d1 > d2) {
			return 1;
		} else if (d1 < d2) {
			return -1;
		} else {
			return 0;
		}
	}
}
