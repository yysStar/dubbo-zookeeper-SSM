package com.qiyun.chaiPiao;

// Generated by MyEclipse Persistence Tools

import com.qiyun.model.basketball.BasketBallMatch;
import com.qiyun.utils.NumberTools;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * FootballDxp generated by MyEclipse Persistence Tools
 */
@SuppressWarnings("serial")
public class BasketballDxp extends AbstractBasketballDxp implements java.io.Serializable {
	public static final String AVG_COMPANY="平均值";
	public static final Map<String, String> COMAPNY=new HashMap<String, String>();
	static{
		COMAPNY.put("澳门", "aomen");
		COMAPNY.put( "立博","libo");
		COMAPNY.put("bet365","ribo");
		COMAPNY.put( "韦德","weide");
		COMAPNY.put("易胜博","yisheng");
		COMAPNY.put("皇冠","huangguan");
		COMAPNY.put(AVG_COMPANY,"avg");
	}
	// Constructors

	/** default constructor */
	public BasketballDxp() {
	}

	/** minimal constructor */
	public BasketballDxp(Integer matchId) {
		super(matchId);
	}

	/** full constructor */
	public BasketballDxp(Integer matchId, Double big, Integer bigChange, Double pankou, Integer pankouChange, Double small, Integer smallChange,
			Integer isFirst, Date time) {
		super(matchId, big, bigChange, pankou, pankouChange, small, smallChange, isFirst, time);
	}

	public Map<String, String> getJsonMap(BasketBallMatch match) {
		Map<String, String> tempMap = new HashMap<String, String>();

		tempMap.put("bs_" + match.getIntTime() + "_" + match.getLineId() + "_b", getBig() + "");
		tempMap.put("bs_" + match.getIntTime() + "_" + match.getLineId() + "_m", getPankou() + "");
		tempMap.put("bs_" + match.getIntTime() + "_" + match.getLineId() + "_s", getSmall() + "");
		tempMap.put("bs_" + match.getIntTime() + "_" + match.getLineId() + "_bC", getBigChange() + "");
		tempMap.put("bs_" + match.getIntTime() + "_" + match.getLineId() + "_mC", getPankouChange() + "");
		tempMap.put("bs_" + match.getIntTime() + "_" + match.getLineId() + "_sC", getSmallChange() + "");

		return tempMap;
	}

	public Map<String, String> getYlb(BasketBallMatch bb, String[] tzbArr) {
		Map<String, String> ylbMap = new HashMap<String, String>();
		Double[] betArr = { getBig(), getSmall() };
		for (int i = 0; i < tzbArr.length; i++) {
			if (tzbArr[i] == null || "0.0%".equals(tzbArr[i]) || betArr == null) {
				continue;
			}
			Double tempYlb = null;
			tzbArr[i] = tzbArr[i].replace("%", "");
			Double tzb = Double.valueOf(tzbArr[i]) / 100;
			tempYlb = 1 - tzb * (betArr[i] + 1);
			String ylb = NumberTools.doubleToPercent(tempYlb, "0.0%");
			ylbMap.put("ylb_" + bb.getIntTime() + "_" + bb.getLineId() + "_bs_" + i, ylb);
		}
		return ylbMap;
	}

	public static Map<String, String> getYlbJsonMap(Map<Integer, BasketballDxp> dxpMap, Map<Integer, BasketballTzb> awardTzbMap,
			List<BasketBallMatch> raceList) {
		if (dxpMap == null || dxpMap.isEmpty() || awardTzbMap == null || awardTzbMap.isEmpty())
			return null;
		Map<String, String> resultMap = new HashMap<String, String>();
		for (BasketBallMatch bb : raceList) {
			BasketballDxp dxp = dxpMap.get(bb.getId());
			BasketballTzb tzb = awardTzbMap.get(bb.getId());
			if (dxp != null && tzb != null) {
				String[] tzbArr = { tzb.getHome(), tzb.getGuest() };
				resultMap.putAll(dxp.getYlb(bb, tzbArr));
			}
		}
		return resultMap;
	}
	
	public void checkChangeStatus(BasketballDxp beforDxp){
		this.setBigChange(getSWchange(this.getBig(),beforDxp.getBig()));
		this.setPankouChange(getSWchange(this.getPankou(),beforDxp.getPankou()));
		this.setSmallChange(getSWchange(this.getSmall(),beforDxp.getSmall()));
	}
	public int getSWchange(Double d1, Double d2) {
		if (d1 > d2) {
			return 1;
		} else if (d1 < d2) {
			return -1;
		} else {
			return 0;
		}
	}
}
