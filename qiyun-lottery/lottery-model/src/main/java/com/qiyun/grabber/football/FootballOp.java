package com.qiyun.grabber.football;

// Generated by MyEclipse Persistence Tools

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.qiyun.grabber.basketball.EuropePKGainScale;
import com.qiyun.lottery.DcArrange;
import com.qiyun.model.football.MatchAwardOfSPF;
import org.apache.commons.lang.StringUtils;

/**
 * FootballOp generated by MyEclipse Persistence Tools
 */
public class FootballOp extends AbstractFootballOp implements java.io.Serializable {

	
	public static final Map<String, String> COMAPNY=new HashMap<String, String>();
	public static final List<String> COMAPNYLIST=new ArrayList<String>();
	public static final Map<String,String> WBW2CLLCOMPANY=new HashMap<String, String>();
	
	static {
		COMAPNY.put("皇冠","huangguan");
		COMAPNY.put("威廉希尔", "weilian");
		COMAPNY.put( "立博","libo");
		COMAPNY.put("Interwetten","Interwetten");
		COMAPNY.put( "伟德","weide");
		COMAPNY.put("易胜博","yisheng");
		COMAPNY.put("明陞","mingsheng");
		COMAPNY.put("利记","liji");
		COMAPNY.put("沙巴","shaba");
		COMAPNY.put("永利高","yongligao");
		COMAPNY.put("Eurobet", "Eurobet");
		COMAPNY.put("bet365","ribo");
		COMAPNY.put("平均值","avg");
		
		WBW2CLLCOMPANY.put("Singbet(皇冠)", "皇冠");
		WBW2CLLCOMPANY.put("威廉希尔", "威廉希尔");
		WBW2CLLCOMPANY.put("立博", "立博");
		WBW2CLLCOMPANY.put("Interwetten", "Interwetten");
		WBW2CLLCOMPANY.put("伟德", "伟德");
		WBW2CLLCOMPANY.put("Easybets(易胜博)", "易胜博");
		WBW2CLLCOMPANY.put("明陞", "明陞");
		WBW2CLLCOMPANY.put("Sbobet(利记)", "利记");
		WBW2CLLCOMPANY.put("沙巴(IBCBET)", "沙巴");
		WBW2CLLCOMPANY.put("永利高", "永利高");
		WBW2CLLCOMPANY.put("Eurobet", "Eurobet");
		WBW2CLLCOMPANY.put("Bet365", "bet365");
		WBW2CLLCOMPANY.put("平均值", "平均值");
		
		COMAPNYLIST.add("huangguan");
		COMAPNYLIST.add("avg");
		COMAPNYLIST.add("weilian");
		COMAPNYLIST.add("libo");
		COMAPNYLIST.add("Interwetten");
		COMAPNYLIST.add("weide");
		COMAPNYLIST.add("yisheng");
		COMAPNYLIST.add("mingsheng");
		COMAPNYLIST.add("liji");
		COMAPNYLIST.add("shaba");
		COMAPNYLIST.add("yongligao");
		COMAPNYLIST.add("Eurobet");
		COMAPNYLIST.add("ribo");
		
	}
	
	// Constructors
	public static String wbw2CllCompany(String wbw){
		if(StringUtils.isEmpty(wbw)){
			return "";
		}
		wbw=wbw.replace(" ", "");//去空格
		String company=WBW2CLLCOMPANY.get(wbw);
		if(StringUtils.isEmpty(company)){
			company=wbw;
		}
		return company;
	}
	/** default constructor */
	public FootballOp() {
	}

	public static Map<String, String> getComapnyYlbJsonMap(Map<String, List<FootballOp>> opMap,
														   Map<Integer, LotteryDcSpfaward> awardMap, List<DcArrange> dcList) {
		Map<String, String> resultMap = new HashMap<String, String>();
		for (DcArrange dc : dcList) {
			L2:
			for (String company : COMAPNYLIST) {
				List<FootballOp> list = opMap.get(company);
				if(list != null){
					for(FootballOp op : list){
						if (op.getMatchId() != null && op.getMatchId().equals(new Integer(dc.getOutid()))) {
							resultMap.putAll(op.getylb(awardMap.get(dc.getId()), dc.getConcede().intValue()));
							break L2;
						}
					}
				}
			}
		}
		return resultMap;
	}
	
	/** minimal constructor */
	public FootballOp(Integer matchId) {
		super(matchId);
	}

	public FootballOp(Integer id, Integer matchId, Double home, Integer homeChange, Double draw, Integer drawChange, Double guest,
			Integer guestChange, Double kellyHome, Integer kellyHomeChange, Double kellyDraw, Integer kellyDrawChange, Double kellyGuest,
			Integer kellyGuestChange, Integer isFirst, Date time) {
		super(id, matchId, home, homeChange, draw, drawChange, guest, guestChange, kellyHome, kellyHomeChange, kellyDraw, kellyDrawChange,
				kellyGuest, kellyGuestChange, isFirst, time);
		// TODO Auto-generated constructor stub
	}
	public String[] getOpArr(){
		String[] opInfo=new String[3];
		opInfo[0]=this.getHome()+"";
		opInfo[1]=this.getDraw()+"";
		opInfo[2]=this.getGuest()+"";
		return opInfo;
	}
	public String[] getOpArrAndKely(){
		String[] opInfo=new String[6];
		opInfo[0]=this.getHome()+"";
		opInfo[1]=this.getDraw()+"";
		opInfo[2]=this.getGuest()+"";
		opInfo[3]=this.getKellyHome()+"";
		opInfo[4]=this.getKellyDraw()+"";
		opInfo[5]=this.getKellyGuest()+"";
		return opInfo;
	}
	public Map<String, String> getJsonMap() {
		Map<String, String> tempMap = new HashMap<String, String>();

		tempMap.put("bz_" + getMatchId() + "_s", getHome() + "");
		tempMap.put("bz_" + getMatchId() + "_p", getDraw() + "");
		tempMap.put("bz_" + getMatchId() + "_f", getGuest() + "");
		tempMap.put("bz_" + getMatchId() + "_sC", getHomeChange() + "");
		tempMap.put("bz_" + getMatchId() + "_pC", getDrawChange() + "");
		tempMap.put("bz_" + getMatchId() + "_fC", getGuestChange() + "");

		return tempMap;
	}

	public Map<String, String> getylb(LotteryDcSpfaward sp, int concede) {

		Map<String, String> ylb = new HashMap<String, String>();
		if (sp == null)
			return ylb;
		Double[] betScale = new Double[] { sp.getHomeWinAward(), sp.getDrawAward(), sp.getGuestWinAward() };
		Double[] waterLevel = new Double[] { getHome(), getDraw(), getGuest() };
		Double[] result = EuropePKGainScale.getGainScale(betScale, waterLevel, concede);
		if (result[0] != null) {
			DecimalFormat df = new DecimalFormat("0.0%");
			ylb.put("ylb_" + getMatchId() + "_bz_0", "/" + df.format(result[0]));
			ylb.put("ylb_" + getMatchId() + "_bz_1", "/" + df.format(result[1]));
			ylb.put("ylb_" + getMatchId() + "_bz_2", "/" + df.format(result[2]));
			String max = "胜";
			if (result[0] > result[1]) {
				max = result[0] > result[2] ? "胜" : "负";
			} else {
				max = result[1] > result[2] ? "平" : "负";
			}
			ylb.put("ylb_" + getMatchId() + "_bz_3", max);
		} else {
			ylb.put("ylb_" + getMatchId() + "_bz_0", "");
			ylb.put("ylb_" + getMatchId() + "_bz_1", "");
			ylb.put("ylb_" + getMatchId() + "_bz_2", "");
			ylb.put("ylb_" + getMatchId() + "_bz_3", "");
		}
		return ylb;
	}

	public Map<String, String> getylb(MatchAwardOfSPF spfAward, int concede) {
		Map<String, String> ylb = new HashMap<String, String>();

		return ylb;
	}


	
	public Map<String, String> getNewYlb(LotteryDcSpfaward sp, int concede) {

		Map<String, String> ylb = new HashMap<String, String>();
		if (sp == null)
			return ylb;
		Double[] betScale = new Double[] { sp.getHomeWinAward(), sp.getDrawAward(), sp.getGuestWinAward() };
		Double[] waterLevel = new Double[] { getHome(), getDraw(), getGuest() };
		Double[] result = EuropePKGainScale.getGainScale(betScale, waterLevel, concede);
		if (result[0] != null) {
			DecimalFormat df = new DecimalFormat("0.0%");
			ylb.put("ylb_" + getMatchId() + "_bz_0",  df.format(result[0]));
			ylb.put("ylb_" + getMatchId() + "_bz_1",  df.format(result[1]));
			ylb.put("ylb_" + getMatchId() + "_bz_2",  df.format(result[2]));
			String max = "胜";
			if (result[0] > result[1]) {
				max = result[0] > result[2] ? "胜" : "负";
			} else {
				max = result[1] > result[2] ? "平" : "负";
			}
			ylb.put("ylb_" + getMatchId() + "_bz_3", max);
		} else {
			ylb.put("ylb_" + getMatchId() + "_bz_0", "");
			ylb.put("ylb_" + getMatchId() + "_bz_1", "");
			ylb.put("ylb_" + getMatchId() + "_bz_2", "");
			ylb.put("ylb_" + getMatchId() + "_bz_3", "");
		}
		return ylb;
	}
	public Map<String, String> getNewYlb(WbwSfcBetInfo betInfo) {

		Map<String, String> ylb = new HashMap<String, String>();
		if (betInfo == null||betInfo.getSfcWinBetRate()==null||betInfo.getSfcDrawBetRate()==null||betInfo.getSfcLoseBetRate()==null)
			return ylb;
		Double[] betScale = new Double[] {  (betInfo.getSfcWinBetRate()*1d)/100, (betInfo.getSfcDrawBetRate()*1d)/100, (betInfo.getSfcLoseBetRate()*1d)/100};
		Double[] waterLevel = new Double[] { getHome(), getDraw(), getGuest() };
		Double[] result = EuropePKGainScale.getGainScale(betScale, waterLevel, 0);
		if (result[0] != null) {
			DecimalFormat df = new DecimalFormat("0.0%");
			ylb.put("ylb_" + getMatchId() + "_bz_0",  df.format(result[0]/100));
			ylb.put("ylb_" + getMatchId() + "_bz_1",  df.format(result[1]/100));
			ylb.put("ylb_" + getMatchId() + "_bz_2",  df.format(result[2]/100));
			String max = "胜";
			if (result[0] > result[1]) {
				max = result[0] > result[2] ? "胜" : "负";
			} else {
				max = result[1] > result[2] ? "平" : "负";
			}
			ylb.put("ylb_" + getMatchId() + "_bz_3", max);
		} else {
			ylb.put("ylb_" + getMatchId() + "_bz_0", "");
			ylb.put("ylb_" + getMatchId() + "_bz_1", "");
			ylb.put("ylb_" + getMatchId() + "_bz_2", "");
			ylb.put("ylb_" + getMatchId() + "_bz_3", "");
		}
		return ylb;
	}
	
	public static Map<String, String> getNewYlbJsonMapByWbwSfcBetInfo(Map<Integer, FootballOp> opMap, Map<Integer, WbwSfcBetInfo> betInfoMap, List<SfpArrange> sfcList) {
		Map<String, String> resultMap = new HashMap<String, String>();
		for (SfpArrange sfc : sfcList) {
			FootballOp op = opMap.get(sfc.getOutId());
			if (op != null) {
				resultMap.putAll(op.getNewYlb(betInfoMap.get(sfc.getSeq())));
			}
		}
		return resultMap;
	}
	
	public static String getKey(String value) {
		for (String key : COMAPNY.keySet())
			if (COMAPNY.get(key).equals(value))
				return key;
		return null;
	}
}
