package com.qiyun.lottery;

// Generated by MyEclipse Persistence Tools

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import com.qiyun.common.CommonStatus;
import com.qiyun.common.DcPlanContentInfo;
import com.qiyun.commonModel.*;
import com.qiyun.httpUtil.WebConstants;
import com.qiyun.item.MatchItem;
import com.qiyun.item.OptionItem;
import com.qiyun.item.football.FootBallMatchItem;
import com.qiyun.model.basketball.BasketBallBetContent;
import com.qiyun.model.basketball.BasketBallBetFilterContent;
import com.qiyun.model.basketball.BasketBallMatchItem;
import com.qiyun.model.football.FootBallBetContent;
import com.qiyun.sporttery.SportteryBetContentModel;
import com.qiyun.sporttery.SportteryFileUploadContentModel;
import com.qiyun.sporttery.SportteryFileUploadLQContentModel;
import com.qiyun.sporttery.SportteryOption;
import com.qiyun.status.PlanStatus;
import com.qiyun.status.PlanStatusList;
import com.qiyun.status.PlanTicketStatus;
import com.qiyun.status.WinStatus;
import com.qiyun.tools.BallCodeConverter;
import com.qiyun.tools.DateTools;
import com.qiyun.tools.FileTools;
import com.qiyun.tools.NumberTools;
import com.qiyun.type.GenType;
import com.qiyun.type.PlanType;
import com.qiyun.type.SelectType;
import com.qiyun.type.SportteryPassType;
import com.qiyun.util.ArithUtil;
import com.qiyun.util.CommonUtils;
import com.qiyun.util.LogUtil;
import org.apache.struts2.ServletActionContext;

/**
 * LotteryPlan generated by MyEclipse Persistence Tools
 */
public class LotteryPlan extends AbstractLotteryPlan implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	// Constructors
	private String contentShow;
	private Date maxStopTime;//最晚赛事的截止投注时间
	private boolean isXZJZ = false;//是否包含旋转矩阵玩法
	private String planProcess;//方案进度
	private List<PlanPointModel> pointModelList; //方案显示状态
	private boolean moreBingo;//方案是否有盈利空间
	private TradeType tradeType; //彩金购买/积分 购买/免费保存 不存入数据库
	
	/** default constructor */
	public LotteryPlan() {
	}

	/** minimal constructor */
	public LotteryPlan(Integer planNo, LotteryType lotteryType, String term, PlanType planType, SelectType selectType, Integer memberId,
					   String account, Integer amount, Integer perAmount, Integer part, Integer soldPart, Integer founderPart, Integer reservePart,
					   Date dealDateTime, Integer multiple, PlanStatus planStatus, WinStatus winStatus, Integer clicks, String content, Integer isUploadContent,
					   PlayType playType, String verifyMd5, Integer isAbleTicketing, PlanTicketStatus planTicketStatus, Integer joinCount) {
		super(planNo, lotteryType, term, planType, selectType, memberId, account, amount, perAmount, part, soldPart, founderPart, reservePart,
				dealDateTime, multiple, planStatus, winStatus, clicks, content, isUploadContent, playType, verifyMd5, isAbleTicketing,
				planTicketStatus,joinCount);
	}

	/** full constructor */
	public LotteryPlan(Integer planNo, LotteryType lotteryType, String term, PlanType planType, SelectType selectType, Integer memberId,
					   String account, Date createDateTime, Integer amount, Integer perAmount, Integer part, Integer soldPart, Integer founderPart,
					   Integer reservePart, Date dealDateTime, Integer multiple, PlanStatus planStatus, Date printTicketDateTime, WinStatus winStatus,
					   Double pretaxPrize, Double posttaxPrize, String prizeContent, Integer clicks, String planDesc, String content, Integer isUploadContent,
					   Integer experience, Integer isSuperMan, PlayType playType, String addAttribute, Integer isTop, Integer model, String verifyMd5,
					   Integer bookCount, GenType genType, Integer isAbleTicketing, PlanTicketStatus planTicketStatus, Integer joinCount, Date returnPrizeTime, Integer openFinish) {
		super(planNo, lotteryType, term, planType, selectType, memberId, account, createDateTime, amount, perAmount, part, soldPart, founderPart,
				reservePart, dealDateTime, multiple, planStatus, printTicketDateTime, winStatus, pretaxPrize, posttaxPrize, prizeContent, clicks,
				planDesc, content, isUploadContent, experience, isSuperMan, playType, addAttribute, isTop, model, verifyMd5, bookCount, genType,
				isAbleTicketing, planTicketStatus,joinCount,returnPrizeTime,openFinish);
		// TODO Auto-generated constructor stub
	}

	public List<PrizeBean> getPrizeBeanList() {
		List<PrizeBean> prizeBeans = PrizeCommon.buildToList(this.getLotteryType().getValue(), this.getPrizeContent());
		if(this.getTradeType() == TradeType.SCORE_BET){
			for(PrizeBean bean:prizeBeans){
				bean.setAmount(Double.valueOf(Double.valueOf(bean.getAmount())*TradeType.getTradeAmount(this.getTradeType())/2).intValue()+"积分");
			}
		}
		return prizeBeans;
	}
	public PrizeBean getPrizeBean(String prizeBeanName) {
		if(getPrizeContent()!=null){
			List<PrizeBean> prizeBeanList=PrizeCommon.buildToList(this.getLotteryType().getValue(), this.getPrizeContent());
			for(PrizeBean bean:prizeBeanList){
				if(prizeBeanName.equals(bean.getPrizeName())){
					return bean;
				}
			}
		}
		return null;
	}
	public DcPlanContentInfo getDcPlanInfo(){
		return DcPlanContentInfo.getInstance(this.getSelectType(),this.getContent());
	}
	public String getContentShow() {
		if (LotteryType.JCLQList.contains(this.getLotteryType()) || LotteryType.JCZQList.contains(this.getLotteryType())|| LotteryType.GYJ_ZQ_LIST.contains(this.getLotteryType())) {
			return contentShow;
		} else {
			if (super.getIsUploadContent() == 0) {
				if (super.getSelectType().getValue() == SelectType.UPLOAD.getValue()) {
					return "<a href='" + super.getContent() + "'>下载文件</a>";
				} else {
					StringBuffer sb = new StringBuffer("<tr class='even'>");
					String[] lines = this.getContent().split("\\%")[0].split("\\~");
					for (int i = 0; i < lines.length; i++) {
						String[] peace = lines[i].split("\\:");
						sb.append("<td>").append(PlayType.getItem(Integer.valueOf(peace[0])).getName()).append("：");
						sb.append(BallCodeConverter.convert(this.getLotteryType().getValue(), Integer.valueOf(peace[0]), peace[1])).append(
								"</td>");
						if ((i + 1) % 3 == 0) {
							sb.append("</tr><tr class='even'>");
						}
					}
					sb.append("</tr>");
					return sb.toString();
				}

			} else {
				if (super.getSelectType().getValue() == SelectType.UPLOAD.getValue()) {
					return "暂未上传";
				} else {
					return "暂未选号";
				}
			}

		}

	}

	public String getContentShowFb() {
		if (super.getIsUploadContent() == 0) {
			if (super.getSelectType().getValue() == SelectType.UPLOAD.getValue()) {
				return "<tr><th>方案</th><td colspan='14'><a target='_blank' href='" + super.getContent() + "'>下载文件</a></td></tr>";
			} else {
				StringBuffer sb = new StringBuffer("");
				String[] lines = this.getContent().split("\\%")[0].split("\\~");
				for (int i = 0; i < lines.length; i++) {
					String[] bets = lines[i].split("\\:")[1].split(",");
					sb.append("<tr><th>方案</th>");
					for (int j = 0; j < bets.length; j++) {
						sb.append("<td>" + bets[j] + "</td>");
					}
					sb.append("</tr>");
				}

				return sb.toString();
			}
		} else {
			if (super.getSelectType().getValue() == SelectType.UPLOAD.getValue()) {
				return "<tr><th>方案</th><td colspan='14'>暂未上传</td></tr>";
			} else {
				return "<tr><th>方案</th><td colspan='14'>暂未选号</td></tr>";
			}
		}
	}

	public String getContentList() {
		if (super.getIsUploadContent() == 0) {
			if (super.getSelectType().getValue() == SelectType.UPLOAD.getValue()) {
				if (LotteryType.JCLQList.contains(getLotteryType())) {
					if(super.getContent().startsWith("{")){
						SportteryFileUploadLQContentModel model= CommonUtils.Object4Json(super.getContent(), SportteryFileUploadLQContentModel.class, BasketBallMatchItem.class);
						return "<a href='" + model.getFilePath() + "' target='_blank'>下载文件</a>";
					}else{
						String comtent = null;
						try {
							comtent = FileTools.getFileContent(WebConstants.getWebPath() + getContent());
						} catch (Exception e) {
							LogUtil.error(e);
						}
						BasketBallBetFilterContent contentModel = CommonUtils.Object4Json(comtent, BasketBallBetFilterContent.class,
								BasketBallMatchItem.class);
						List<String> contentList = contentModel.getContentList();
						String selectContent = "";
	
						for (String temp : contentList) {
							selectContent += temp;
							selectContent += "</br>";
						}
						return selectContent;
					}
				} else if(LotteryType.JCZQList.contains(getLotteryType())&&super.getContent().startsWith("{")){
					SportteryFileUploadContentModel model=CommonUtils.Object4Json(super.getContent(), SportteryFileUploadContentModel.class, FootBallMatchItem.class);
					return "<a href='" + model.getFilePath() + "' target='_blank'>下载文件</a>";
				}else {
					return "<a href='" + super.getContent() + "' target='_blank'>下载文件</a>";
				}

			} else {
				return genContentList(this.getLotteryType(), this.getContent());
			}
		} else {
			if (super.getSelectType().getValue() == SelectType.UPLOAD.getValue()) {
				return "暂未上传";
			} else {
				return "暂未选号";
			}
		}
	}

	@SuppressWarnings("unchecked")
	public static String genContentList(LotteryType lt, String content) {

		StringBuffer sb = new StringBuffer("");
		if (LotteryType.JCLQList.contains(lt) || LotteryType.JCZQList.contains(lt)) {
			String selectValue = "";
			if (content != null && content.length() > 0) {
				SportteryBetContentModel comtent = null;
				if (LotteryType.JCLQList.contains(lt)) {
					comtent = CommonUtils.Object4Json(content, BasketBallBetContent.class, BasketBallMatchItem.class);
				} else {
					comtent = CommonUtils.Object4Json(content, FootBallBetContent.class, FootBallMatchItem.class);
				}
				List<MatchItem> matchItemList = comtent.getMatchItems();

				if (comtent.getPassMode() == 0) {
					selectValue = "单关:";
				} else {
					selectValue = "过关:";
				}

				for (int i = 0; i < matchItemList.size(); i++) {
					MatchItem item = matchItemList.get(i);
					List<SportteryOption> optionList = item.getOptions();
					String weekStr = DateTools.getWeekStr(DateTools.StringToDate(item.getIntTime() + "", "yyyyMMdd"));
					selectValue += weekStr + item.getLineId() + "(";
					for (int j = 0; j < optionList.size(); j++) {
						SportteryOption option = optionList.get(j);
						OptionItem optionItem = CommonUtils.getByPlayType(lt, option);
						selectValue += optionItem.getText() + ",";
					}
					selectValue = selectValue.substring(0, selectValue.length() - 1);
					selectValue += ") ";
				}
			}
			return selectValue;
		} else {
			String[] lines = content.split("\\%")[0].split("\\~");
			for (int i = 0; i < lines.length; i++) {
				String[] peace = lines[i].split("\\:");
				sb.append("").append(PlayType.getItem(Integer.valueOf(peace[0])).getName()).append("：");

				sb.append(BallCodeConverter.convert(lt.getValue(), Integer.valueOf(peace[0]), peace[1])).append("<br>");

			}
		}
		sb.append("");
		return sb.toString();

	}

	public String getContentShowPhone(String agentId){
		HttpServletRequest request= ServletActionContext.getRequest();
		String host=request.getServerName();
		String path="http://"+host;
		if (super.getIsUploadContent() == 0) {
			if (super.getSelectType().getValue() == SelectType.UPLOAD.getValue()) {
				String countent=this.getContent();
				if(LotteryType.JCZQList.contains(getLotteryType())){
					String filepath=countent.split("filePath")[1].split(",")[0].split("\"")[2];
					return path+filepath;
				}else if(LotteryType.JCLQList.contains(getLotteryType())){
					if(countent.startsWith("{")){
						String filepath=countent.split("filePath")[1].split(",")[0].split("\"")[2];
						return path+filepath;
					}else{
						String comtent = null;
						try {
							comtent = FileTools.getFileContent(WebConstants.getWebPath() + getContent());
						} catch (Exception e) {
							LogUtil.error(e);
						}
						BasketBallBetFilterContent contentModel = CommonUtils.Object4Json(comtent, BasketBallBetFilterContent.class,
								BasketBallMatchItem.class);
						List<String> contentList = contentModel.getContentList();
						String selectContent = "";

						for (String temp : contentList) {
							selectContent += temp;
							selectContent += "</br>";
						}
						return selectContent;
					}
				}else{
					return path+this.getContent();
				}
			} else {
				if("zyu168".equals(agentId)){
				StringBuffer sb = new StringBuffer("<tr class='even'>");
				sb.delete(sb.length()-17, sb.length()-0);
				String[] lines = this.getContent().split("\\%")[0].split("\\~");
				for (int i = 0; i < lines.length; i++) {
					String[] peace = lines[i].split("\\:");
					sb.append(PlayType.getItem(Integer.valueOf(peace[0])).getName()).append("：");
					sb.append(BallCodeConverter.convert(this.getLotteryType().getValue(), Integer.valueOf(peace[0]), peace[1])).append("<br/>");
//					if ((i + 1) % 3 == 0) {
//						sb.append("</tr><tr class='even'>");
//					}
				}
				//sb.append("</tr>");
				return sb.toString();
				}else
					return genContentList(this.getLotteryType(), this.getContent());
				
			}

		} else {
			if (super.getSelectType().getValue() == SelectType.UPLOAD.getValue()) {
				return "暂未上传";
			} else {
				return "暂未选号";
			}
		}

		

	}
	public float getSoldPartFloat() {
		return super.getSoldPart().floatValue();
	}

	public int getTotalPrizeCount() {
		String prizeContent = super.getPrizeContent();
		if(prizeContent != null){
			String[] prizeArr = prizeContent.split("#");
			int count = 0;
			for (int i = 0; i < prizeArr.length; i++) {
				int temp = Integer.valueOf(prizeArr[i].split("\\^")[1]);
				count += temp;
			}
			return count;
		}
		return 0;
	}

	public String getPrizeTypes() {
		String prizeTypes = "";
		if(this.getPrizeContent() != null){
			String[] prizePiece = this.getPrizeContent().split("\\#");
			for (int i = 0; i < prizePiece.length; i++) {
				int temp = Integer.valueOf(prizePiece[i].split("\\^")[1]);
				if (temp > 0) {
					prizeTypes += "," + PlayType.getItem(116 + i).getName();
				}
			}
			prizeTypes = prizeTypes.substring(1);
		}
		return prizeTypes;
	}

	public String getPlayTypes() {
		String playType = "";
		if (LotteryType.JCLQList.contains(this.getLotteryType())) {
			SportteryBetContentModel<BasketBallMatchItem> contentModel = CommonUtils.Object4Json(this.getContent(), BasketBallBetFilterContent.class,
					BasketBallMatchItem.class);// 把方案的content换成对象
			List<SportteryPassType> passTypes = contentModel.getPassTypes();
			for (SportteryPassType passType : passTypes) {
				playType += "," + passType.getText();
			}
			playType = playType.substring(1);
		}
		return playType;

	}

	public static String getLqContent(LotteryType lt, String content) {
		String selectValue = "";
		if (content != null && content.length() > 0) {
			BasketBallBetContent comtent = CommonUtils.Object4Json(content, BasketBallBetContent.class, BasketBallMatchItem.class);
			List<BasketBallMatchItem> matchItemList = comtent.getMatchItems();

			if (comtent.getPassMode() == 0) {
				selectValue = "单关:";
			} else {
				selectValue = "过关:";
			}

			for (int i = 0; i < matchItemList.size(); i++) {
				BasketBallMatchItem item = matchItemList.get(i);
				List<SportteryOption> optionList = item.getOptions();
				String weekStr = DateTools.getWeekStr(DateTools.StringToDate(item.getIntTime() + "", "yyyyMMdd"));
				selectValue += weekStr + item.getLineId() + "(";
				for (int j = 0; j < optionList.size(); j++) {
					SportteryOption option = optionList.get(j);
					OptionItem optionItem = CommonUtils.getByPlayType(lt, option);
					selectValue += "," + optionItem.getText();
				}
				selectValue = selectValue.substring(1);
				selectValue += ") ";
			}
		}
		return selectValue;
	}

	public void setContentShow(String contentShow) {
		this.contentShow = contentShow;
	}

	public boolean isXZJZ() {
		String[] lines = this.getContent().split("\\%")[0].split("\\~");
		for (int i = 0; i < lines.length; i++) {
			String[] peace = lines[i].split("\\:");
			int playType = Integer.valueOf(peace[0]);
			
			if (playType == PlayType.XZJZ_Z6B5.getValue() || playType == PlayType.XZJZ_Z6B4.getValue() || playType == PlayType.XZJZ_Z5B5.getValue() ||
				playType == PlayType.XZJZ_Z5B4.getValue() || playType == PlayType.XZJZ_Z5B3.getValue() || playType == PlayType.XZJZ_Z4B4.getValue()) {
				isXZJZ = true;
				break;
			}
		}
		
		return isXZJZ;
	}
    
	/**
	 * <p>获取中奖时间距离现在的时间</p>
	 * @return String
	 */
	public String getPrizePeriod() {
		String minute = "";
		Date openResultTime = getOpenResultTime();
		
		if (openResultTime != null) {
			minute = DateTools.getMinutes(openResultTime);
		}
		
		return minute;
	}
	
	public Date getMaxStopTime() {
		return maxStopTime;
	}

	public void setMaxStopTime(Date maxStopTime) {
		this.maxStopTime = maxStopTime;
	}
	
	/**
	 * 进度百分比
	 * @return
	 */
	public String getSchedule(){
		double v = ArithUtil.div(getSoldPart(), getPart());
		return NumberTools.doubleToPercent(v);
	}
	
	/**
	 * 保底百分比
	 * @return
	 */
	public String getReservePartPercent(){
		double v = ArithUtil.div(getReservePart(), getPart());
		return NumberTools.doubleToPercent(v);
	}
	
	/**
	 * 剩余份数
	 * @return
	 */
	public int getResiduePart(){
		return getPart() - getSoldPart();
	}

	public String getPlanProcess() {
		String process="100%";
		double parts=ArithUtil.add(getSoldPart(), getReservePart());
		
		if(parts<getAmount()){
			process=(int)(ArithUtil.div(parts, getAmount(),2)*100)+"%";
		}
		planProcess=process;
		return planProcess;
	}
	public String getLotteryPath(){
		String path="";
		if(LotteryType.LOTTERY_PATH.containsKey(getLotteryType())){
			path="/lottery/"+LotteryType.LOTTERY_PATH.get(getLotteryType());
		}
		return path;
	}

	public List<PlanPointModel> getPointModelList() {
		List<PlanPointModel> resultList=new ArrayList<PlanPointModel>();
		PlanStatus planStatus=getPlanStatus();
		WinStatus winStatus=getWinStatus();
		PlanTicketStatus ticketStatus=getPlanTicketStatus();//出票状态
		boolean isPartOpen=false;//是否部分开奖
		//竞彩足球,竞彩篮球的代购方案(排除名家内幕)为部分开奖方案
		if(getPlanType()==PlanType.DG &&getGenType()!=GenType.EXPERT_TIPS 
				&& (LotteryType.JCZQList.contains(getLotteryType())||LotteryType.JCLQList.contains(getLotteryType()))){
			isPartOpen=true;
		}
		
		PlanPointModel startPoint=new PlanPointModel("发起",getCreateDateTime(),true,"100%",false);
		PlanPointModel ticketPoint=new PlanPointModel("出票",null,false,"",false);
		PlanPointModel openPoint=new PlanPointModel("开奖",getOpenResultTime(),false,"",false);
		PlanPointModel partOpenPoint=new PlanPointModel("部分开奖",null,false,"",true);
		PlanPointModel partSendPoint=new PlanPointModel("部分派奖",null,false,"",true);
		PlanPointModel sendPoint=new PlanPointModel("派奖",getReturnPrizeTime(),false,"",false);
		
		List<PlanStatus> nullityList=new ArrayList<PlanStatus>(); //无效的方案状态
		nullityList.add(PlanStatus.CANCEL);
		nullityList.add(PlanStatus.ABORT);
		nullityList.add(PlanStatus.TICKETING);
		nullityList.add(PlanStatus.TICKET_PARTOUT);
		nullityList.add(PlanStatus.TICKET_GQ);
		
		if(nullityList.contains(planStatus)){//失败流程
			PlanPointModel nextPoint=new PlanPointModel("失败",null,true,"",false);
			resultList.add(startPoint);
			resultList.add(nextPoint);
		}else{//成功流程

			resultList.add(startPoint);
			if(this.getTradeType() == TradeType.TRADE_BALANCE){
				resultList.add(ticketPoint);
			}
			if(isPartOpen){
				if(winStatus==WinStatus.NOT_AWARD||winStatus==WinStatus.AWARD){
					resultList.add(openPoint);
				}else{
					resultList.add(partOpenPoint);
					resultList.add(partSendPoint);
				}
			}else{
				resultList.add(openPoint);
			}
			resultList.add(sendPoint);
			//根据状态调整每个pointModel
			if(planStatus==PlanStatus.RECRUITING || planStatus==PlanStatus.PAY_FINISH){//招募中/出票中
				if(ticketStatus==PlanTicketStatus.NO_PROCESS){
					startPoint.setProgress("50%");
				}else{//满90% 出票 
					startPoint.setProgress("100%");
					if(ticketStatus==PlanTicketStatus.TICKET_FINISH){
						ticketPoint.setTime(getPrintTicketDateTime());
						ticketPoint.setIsFinsih(true);
					}
				}
			}else if(planStatus==PlanStatus.TICKET_OUT){//已出票
				List<WinStatus> awardList=new ArrayList<WinStatus>();
				awardList.add(WinStatus.SEND_AWARD);
				awardList.add(WinStatus.PART_AWARD);
				awardList.add(WinStatus.PART_SEND);
				awardList.add(WinStatus.AWARD);
				
				ticketPoint.setTime(getPrintTicketDateTime());
				ticketPoint.setIsFinsih(true);
				if(awardList.contains(winStatus)){
					ticketPoint.setProgress("100%");
					partOpenPoint.setTime(getOpenResultTime());
					partOpenPoint.setIsFinsih(true);
					if(winStatus==WinStatus.PART_SEND || winStatus==WinStatus.SEND_AWARD){
						partOpenPoint.setProgress("100%");
						partSendPoint.setIsFinsih(true);
						partSendPoint.setTime(getReturnPrizeTime());
					}
					openPoint.setTime(getOpenResultTime());
					openPoint.setIsFinsih(true);
					if(winStatus==WinStatus.SEND_AWARD){
						partSendPoint.setProgress("100%");
						openPoint.setProgress("100%");
						sendPoint.setIsFinsih(true);
					}
				}else if(winStatus==WinStatus.NOT_AWARD){
					ticketPoint.setProgress("100%");
					openPoint.setTime(getOpenResultTime());
					openPoint.setIsFinsih(true);
					openPoint.setProgress("100%");
					sendPoint.setText(winStatus.getName());
					sendPoint.setIsFinsih(true);
				}else if(winStatus==WinStatus.PART_NOT_AWARD){
					ticketPoint.setProgress("100%");
					partOpenPoint.setTime(getOpenResultTime());
					partOpenPoint.setIsFinsih(true);
				}
			}
			
		}
		pointModelList=resultList;
		return pointModelList;
	}
	/**
	 * 判断方案是否还有盈利空间
	 * @return
	 */
	public boolean getMoreBingo(){
		boolean moreBingo=false;//是否有赢利空间
		WinStatus winStatus=getWinStatus();
		if(winStatus==WinStatus.PART_NOT_AWARD|| winStatus==WinStatus.PART_AWARD|| winStatus==WinStatus.PART_SEND){
			if(getOpenFinish()==0){//未全开完奖
				moreBingo=true;
			}
		}
		this.moreBingo=moreBingo;
		return this.moreBingo;
	}
	
	/**
	 * 方案是否已过期
	 * @return
	 */
	public boolean getPlanPastdue(){
//		if(this.getPayFinishTime() == null && this.getDealDateTime().getTime() < new Date().getTime())
//			return true;
		return false;
	}
	

	public List<PlanStatusList> getPlanStatusList() {
		List<PlanStatusList> statusList = new ArrayList<PlanStatusList>();
		statusList.add(new PlanStatusList("创建方案",DateTools.dateToString(this.getCreateDateTime()),null));
		//过期未支付
		if(getPlanPastdue()){
			statusList.add(new PlanStatusList("方案过期",DateTools.dateToString(this.getDealDateTime()),null));
			if(this.getWinStatus() != WinStatus.NOT_RESULT && this.getOpenResultTime() != null){
				statusList.add(new PlanStatusList("彩票开奖",DateTools.dateToString(this.getOpenResultTime()),"已完成"));
			}
		}else{
			//是否是过期后支付 true 是 false否
			boolean isPastPay = this.getDealDateTime() != null && this.getPayFinishTime() != null && this.getDealDateTime().getTime() < this.getPayFinishTime().getTime();		
			//过期支付不显示 预约中与已受理 
			if(!isPastPay){		
				if(this.getPayFinishTime() != null){
					statusList.add(new PlanStatusList("提交出票预约",DateTools.dateToString(this.getPayFinishTime()),null));
				}		
				if(this.getAcceptTime() != null){
					statusList.add(new PlanStatusList("投注站已受理",DateTools.dateToString(this.getAcceptTime()),null));
				}
			}
			//出票成功
			if(PlanTicketStatus.TICKET_FINISH == this.getPlanTicketStatus()){
				if(this.getPrintTicketDateTime() != null){
					statusList.add(new PlanStatusList("出票成功",DateTools.dateToString(this.getPrintTicketDateTime()),PlanStatus.TICKET_OUT.getName()));
				}
				//已经派奖
				if(this.getWinStatus() == WinStatus.SEND_AWARD || this.getWinStatus() == WinStatus.AWARD){
					if(this.getOpenResultTime() != null){
						statusList.add(new PlanStatusList("彩票开奖",DateTools.dateToString(this.getOpenResultTime()),null));
					}			
					if(this.getReturnPrizeTime() != null ){
						statusList.add(new PlanStatusList("彩票兑奖中",DateTools.dateToString(this.getReturnPrizeTime()),this.getPosttaxPrize()+""));
					}
					if(this.getArrivalTime() != null){
						statusList.add(new PlanStatusList("已兑奖",DateTools.dateToString(this.getArrivalTime()),"已完成"));
					}
				}else if(this.getWinStatus() == WinStatus.NOT_AWARD){
					statusList.add(new PlanStatusList("彩票开奖",DateTools.dateToString(this.getOpenResultTime()),"已完成"));
				}
			//出票失败
			}else if(PlanStatus.TICKET_GQ == this.getPlanStatus()){
				//过期后支付
				if(isPastPay){
					statusList.add(new PlanStatusList("方案截止时间",DateTools.dateToString(this.getDealDateTime()),null));
					statusList.add(new PlanStatusList("支付时间",DateTools.dateToString(this.getPayFinishTime()),null));
				//已支付出票失败
				}else if(this.getPrintTicketDateTime() != null && this.getPayFinishTime() != null){
					statusList.add(new PlanStatusList("出票失败",DateTools.dateToString(this.getPrintTicketDateTime()),null));
				}			
				if(this.getRefundStartTime() != null){
					statusList.add(new PlanStatusList("退款中",DateTools.dateToString(this.getRefundStartTime()),null));
				}
				if(this.getArrivalTime() != null){
					statusList.add(new PlanStatusList("已退款", DateTools.dateToString(this.getArrivalTime()),"已完成"));
				}
			}
		}
		return statusList;
	}


	public TradeType getTradeType() {
		return tradeType;
	}

	public void setTradeType(TradeType tradeType) {
		this.tradeType = tradeType;
	}

	public String getUnit(){
		String unit = "金额";
		if(this.getTradeType() == TradeType.SCORE_BET){
			unit = "积分";
		}
		return unit;
	}
	public String getUnitText(){
		String unit = "";
		if(this.getTradeType() == TradeType.TRADE_BALANCE){
			unit = "元";
		}
		return unit;
	}
	
	public void updatePlanStatusForScore(){
		this.setPayFinishTime(new Date());
		this.setPlanStatus(PlanStatus.TICKET_OUT);
		this.setPlanTicketStatus(PlanTicketStatus.TICKET_FINISH);
		this.setIsAbleTicketing(CommonStatus.NO.getValue());
		this.setAcceptTime(new Date());
	}
	
	//方案注数
	public int getBetConut(){
		return this.getAmount()/this.getMultiple()/TradeType.getTradeAmount(this.getTradeType());
	}
}
