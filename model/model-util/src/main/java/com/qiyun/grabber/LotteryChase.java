package com.qiyun.grabber;

// Generated by MyEclipse Persistence Tools

import com.qiyun.commonModel.LotteryType;
import com.qiyun.commonModel.PlayType;
import com.qiyun.lottery.GainConditionParser;
import com.qiyun.lottery.LotteryPlan;
import com.qiyun.lottery.StartConditionParser;
import com.qiyun.lottery.StopConditionParser;
import com.qiyun.status.ChaseStatus;
import com.qiyun.tools.BallCodeConverter;
import com.qiyun.type.ChaseType;
import com.qiyun.type.GenType;
import com.qiyun.type.SelectType;
import com.qiyun.type.WalletType;

/**
 * LotteryChase generated by MyEclipse Persistence Tools
 */
public class LotteryChase extends AbstractLotteryChase implements java.io.Serializable {

    // Constructors

    /**
     * default constructor
     */
    public LotteryChase() {
    }

    /**
     * full constructor
     */
    public LotteryChase(Integer chaseNo, String account, LotteryType lotteryType, ChaseType chaseType, Integer amount,
                        String chaseContent, ChaseStatus status, WalletType walletType, SelectType selectType,
                        PlayType playType, Integer multiple, String addAttribute, String verifyMd5, Integer totalTerm,
                        Integer soldTerm, GenType genType) {
        super(chaseNo, account, lotteryType, chaseType, amount, chaseContent, status, walletType, selectType, playType,
                multiple, addAttribute, verifyMd5, totalTerm, soldTerm, genType);
    }

    public String getContentShow() {
        StringBuffer sb = new StringBuffer();
        String[] lines = this.getChaseContent().split("\\%")[0].split("\\~");
        for (int i = 0; i < lines.length; i++) {
            String[] peace = lines[i].split("\\:");
            int playType = Integer.parseInt(peace[0]);
            if (LotteryType.POKER3.getValue() == getLotteryType().getValue()) {//快乐扑克3玩法
                if (PlayType.pokerK3Map.containsKey(playType)) {
                    peace[1] = BallCodeConverter.convert(LotteryType.POKER3.getValue(), playType, peace[1]);
                }
            }
            sb.append("<li>").append(PlayType.getItem(Integer.valueOf(peace[0])).getName()).append("：").append(peace[1]).append("</li>");
        }
        return sb.toString();
    }

    public String getStartConditionShow() {
        return StartConditionParser.getStartConditionShow(this.getLotteryType(), this.getStartCondition(), this.getTotalTerm());
    }

    public String getContentList() {
        return LotteryPlan.genContentList(this.getLotteryType(), this.getChaseContent());
    }

    public String getStopConditionShow() {
        return StopConditionParser.getStopConditionShow(this.getStopCondition(), this.getTradeType());
    }

    public String getGainConditionShow() {
        return GainConditionParser.getGainConditionShow(this.getLotteryType(), this.getGainCondition(), this.getTotalTerm());
    }
}
