<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qiyun.mapper2.CommentMapper" >
  <resultMap id="BaseResultMap" type="com.qiyun.model2.Comment" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="plan_no" property="planNo" jdbcType="INTEGER" />
    <result column="plan_account" property="planAccount" jdbcType="VARCHAR" />
    <result column="plan_username" property="planUsername" jdbcType="VARCHAR" />
    <result column="plan_picture" property="planPicture" jdbcType="VARCHAR" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="picture" property="picture" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="floor" property="floor" jdbcType="INTEGER" />
    <result column="comment_time" property="commentTime" jdbcType="TIMESTAMP" />
    <result column="reply_time" property="replyTime" jdbcType="TIMESTAMP" />
    <result column="like_count" property="likeCount" jdbcType="INTEGER" />
    <result column="is_read" property="isRead" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.qiyun.model2.CommentWithBLOBs" extends="BaseResultMap" >
    <result column="connect" property="connect" jdbcType="LONGVARCHAR" />
    <result column="reply" property="reply" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, plan_no, plan_account, plan_username, plan_picture, account, username, picture, 
    status, floor, comment_time, reply_time, like_count, is_read
  </sql>
  <sql id="Blob_Column_List" >
    connect, reply
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.qiyun.model2.CommentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.qiyun.model2.CommentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from comment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from comment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qiyun.model2.CommentWithBLOBs" >
    insert into comment (id, plan_no, plan_account, 
      plan_username, plan_picture, account, 
      username, picture, status, 
      floor, comment_time, reply_time, 
      like_count, is_read, connect, 
      reply)
    values (#{id,jdbcType=INTEGER}, #{planNo,jdbcType=INTEGER}, #{planAccount,jdbcType=VARCHAR}, 
      #{planUsername,jdbcType=VARCHAR}, #{planPicture,jdbcType=VARCHAR}, #{account,jdbcType=VARCHAR}, 
      #{username,jdbcType=VARCHAR}, #{picture,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{floor,jdbcType=INTEGER}, #{commentTime,jdbcType=TIMESTAMP}, #{replyTime,jdbcType=TIMESTAMP}, 
      #{likeCount,jdbcType=INTEGER}, #{isRead,jdbcType=INTEGER}, #{connect,jdbcType=LONGVARCHAR}, 
      #{reply,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.qiyun.model2.CommentWithBLOBs" >
    insert into comment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="planNo != null" >
        plan_no,
      </if>
      <if test="planAccount != null" >
        plan_account,
      </if>
      <if test="planUsername != null" >
        plan_username,
      </if>
      <if test="planPicture != null" >
        plan_picture,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="picture != null" >
        picture,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="floor != null" >
        floor,
      </if>
      <if test="commentTime != null" >
        comment_time,
      </if>
      <if test="replyTime != null" >
        reply_time,
      </if>
      <if test="likeCount != null" >
        like_count,
      </if>
      <if test="isRead != null" >
        is_read,
      </if>
      <if test="connect != null" >
        connect,
      </if>
      <if test="reply != null" >
        reply,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="planNo != null" >
        #{planNo,jdbcType=INTEGER},
      </if>
      <if test="planAccount != null" >
        #{planAccount,jdbcType=VARCHAR},
      </if>
      <if test="planUsername != null" >
        #{planUsername,jdbcType=VARCHAR},
      </if>
      <if test="planPicture != null" >
        #{planPicture,jdbcType=VARCHAR},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="picture != null" >
        #{picture,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="floor != null" >
        #{floor,jdbcType=INTEGER},
      </if>
      <if test="commentTime != null" >
        #{commentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="replyTime != null" >
        #{replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="likeCount != null" >
        #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="isRead != null" >
        #{isRead,jdbcType=INTEGER},
      </if>
      <if test="connect != null" >
        #{connect,jdbcType=LONGVARCHAR},
      </if>
      <if test="reply != null" >
        #{reply,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qiyun.model2.CommentWithBLOBs" >
    update comment
    <set >
      <if test="planNo != null" >
        plan_no = #{planNo,jdbcType=INTEGER},
      </if>
      <if test="planAccount != null" >
        plan_account = #{planAccount,jdbcType=VARCHAR},
      </if>
      <if test="planUsername != null" >
        plan_username = #{planUsername,jdbcType=VARCHAR},
      </if>
      <if test="planPicture != null" >
        plan_picture = #{planPicture,jdbcType=VARCHAR},
      </if>
      <if test="account != null" >
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="picture != null" >
        picture = #{picture,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="floor != null" >
        floor = #{floor,jdbcType=INTEGER},
      </if>
      <if test="commentTime != null" >
        comment_time = #{commentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="replyTime != null" >
        reply_time = #{replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="likeCount != null" >
        like_count = #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="isRead != null" >
        is_read = #{isRead,jdbcType=INTEGER},
      </if>
      <if test="connect != null" >
        connect = #{connect,jdbcType=LONGVARCHAR},
      </if>
      <if test="reply != null" >
        reply = #{reply,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.qiyun.model2.CommentWithBLOBs" >
    update comment
    set plan_no = #{planNo,jdbcType=INTEGER},
      plan_account = #{planAccount,jdbcType=VARCHAR},
      plan_username = #{planUsername,jdbcType=VARCHAR},
      plan_picture = #{planPicture,jdbcType=VARCHAR},
      account = #{account,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      picture = #{picture,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      floor = #{floor,jdbcType=INTEGER},
      comment_time = #{commentTime,jdbcType=TIMESTAMP},
      reply_time = #{replyTime,jdbcType=TIMESTAMP},
      like_count = #{likeCount,jdbcType=INTEGER},
      is_read = #{isRead,jdbcType=INTEGER},
      connect = #{connect,jdbcType=LONGVARCHAR},
      reply = #{reply,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qiyun.model2.Comment" >
    update comment
    set plan_no = #{planNo,jdbcType=INTEGER},
      plan_account = #{planAccount,jdbcType=VARCHAR},
      plan_username = #{planUsername,jdbcType=VARCHAR},
      plan_picture = #{planPicture,jdbcType=VARCHAR},
      account = #{account,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      picture = #{picture,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      floor = #{floor,jdbcType=INTEGER},
      comment_time = #{commentTime,jdbcType=TIMESTAMP},
      reply_time = #{replyTime,jdbcType=TIMESTAMP},
      like_count = #{likeCount,jdbcType=INTEGER},
      is_read = #{isRead,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getConsumptionCount" parameterType="map" resultType="java.lang.Integer">
    SELECT SUM(AMOUNT)
    FROM member_wallet_line
    WHERE ACCOUNT = #{account,jdbcType=VARCHAR}
    AND TRANS_TYPE in
    <foreach  item="item" index="index" collection="list" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>
  <select id="getPlanAccount" parameterType="java.lang.Integer" resultType="java.lang.String">
  SELECT ACCOUNT
  FROM lottery_plan
  WHERE PLAN_NO = #{planNo,jdbcType=INTEGER}
  </select>
  <select id="getPicture" parameterType="java.lang.String" resultType="java.lang.String">
SELECT PICTURE
FROM member
WHERE ACCOUNT = #{account,jdbcType=VARCHAR}
</select>
  <select id="getFloor" parameterType="java.lang.Integer" resultType="java.lang.Integer">
  SELECT max(floor)
  FROM comment
  WHERE PLAN_NO = #{planNo,jdbcType=INTEGER}
</select>
  <select id="getCommentListByTime" resultMap="ResultMapWithBLOBs" parameterType="map">
    SELECT
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    FROM `comment`
    WHERE plan_no = #{planNo,jdbcType=INTEGER}
    AND (status =1 OR account = #{account,jdbcType=VARCHAR})
    ORDER BY comment_time DESC
  </select>
  <select id="getCommentListByLike"  resultMap="ResultMapWithBLOBs" parameterType="map">
    SELECT
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    FROM `comment`
    WHERE plan_no = #{planNo,jdbcType=INTEGER}
    AND (status =1 OR account = #{account,jdbcType=VARCHAR})
    ORDER BY like_count DESC,comment_time DESC
  </select>
  <update id="likeComment" parameterType="java.lang.Integer">
  UPDATE comment SET like_count = like_count+1 WHERE id = #{commentId,jdbcType=INTEGER}
</update>
  <update id="nolikeComment" parameterType="java.lang.Integer">
  UPDATE comment SET like_count = like_count-1 WHERE id = #{commentId,jdbcType=INTEGER}
</update>

  <select id="getUnread" resultType="java.lang.Integer">
    SELECT COUNT(*)
    FROM `comment`
    WHERE plan_account = #{account,jdbcType=VARCHAR}
    AND is_read = 0
  </select>
  <select id="getLikeCount" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    SELECT COUNT(*)
    FROM `comment`
    WHERE plan_no = #{plan_no,jdbcType=INTEGER}
  </select>
  <select id="getUsernameByAccount" parameterType="java.lang.String" resultType="java.lang.String">
    SELECT username
    FROM member
    WHERE ACCOUNT = #{account,jdbcType=VARCHAR}
  </select>
</mapper>