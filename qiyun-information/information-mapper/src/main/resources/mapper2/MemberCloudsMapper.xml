<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qiyun.mapper2.MemberCloudsMapper">
  <resultMap id="BaseResultMap" type="com.qiyun.model2.MemberClouds">
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="ACCOUNT" jdbcType="VARCHAR" property="account" />
    <result column="CLOUDS_ABLE_BALANCE" jdbcType="INTEGER" property="cloudsAbleBalance" />
    <result column="take_cash_quota" jdbcType="DOUBLE" property="takeCashQuota" />
    <result column="FREEZE_BALANCE" jdbcType="INTEGER" property="freezeBalance" />
    <result column="HEAP_BALANCE" jdbcType="INTEGER" property="heapBalance" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, ACCOUNT, CLOUDS_ABLE_BALANCE, take_cash_quota, FREEZE_BALANCE, HEAP_BALANCE
  </sql>
  <select id="selectByExample" parameterType="com.qiyun.model2.MemberCloudsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from member_clouds
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from member_clouds
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from member_clouds
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qiyun.model2.MemberClouds">
    insert into member_clouds (ID, ACCOUNT, CLOUDS_ABLE_BALANCE, 
      take_cash_quota, FREEZE_BALANCE, HEAP_BALANCE
      )
    values (#{id,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, #{cloudsAbleBalance,jdbcType=INTEGER}, 
      #{takeCashQuota,jdbcType=DOUBLE}, #{freezeBalance,jdbcType=INTEGER}, #{heapBalance,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.qiyun.model2.MemberClouds">
    insert into member_clouds
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="account != null">
        ACCOUNT,
      </if>
      <if test="cloudsAbleBalance != null">
        CLOUDS_ABLE_BALANCE,
      </if>
      <if test="takeCashQuota != null">
        take_cash_quota,
      </if>
      <if test="freezeBalance != null">
        FREEZE_BALANCE,
      </if>
      <if test="heapBalance != null">
        HEAP_BALANCE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="cloudsAbleBalance != null">
        #{cloudsAbleBalance,jdbcType=INTEGER},
      </if>
      <if test="takeCashQuota != null">
        #{takeCashQuota,jdbcType=DOUBLE},
      </if>
      <if test="freezeBalance != null">
        #{freezeBalance,jdbcType=INTEGER},
      </if>
      <if test="heapBalance != null">
        #{heapBalance,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qiyun.model2.MemberClouds">
    update member_clouds
    <set>
      <if test="account != null">
        ACCOUNT = #{account,jdbcType=VARCHAR},
      </if>
      <if test="cloudsAbleBalance != null">
        CLOUDS_ABLE_BALANCE = #{cloudsAbleBalance,jdbcType=INTEGER},
      </if>
      <if test="takeCashQuota != null">
        take_cash_quota = #{takeCashQuota,jdbcType=DOUBLE},
      </if>
      <if test="freezeBalance != null">
        FREEZE_BALANCE = #{freezeBalance,jdbcType=INTEGER},
      </if>
      <if test="heapBalance != null">
        HEAP_BALANCE = #{heapBalance,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qiyun.model2.MemberClouds">
    update member_clouds
    set ACCOUNT = #{account,jdbcType=VARCHAR},
      CLOUDS_ABLE_BALANCE = #{cloudsAbleBalance,jdbcType=INTEGER},
      take_cash_quota = #{takeCashQuota,jdbcType=DOUBLE},
      FREEZE_BALANCE = #{freezeBalance,jdbcType=INTEGER},
      HEAP_BALANCE = #{heapBalance,jdbcType=INTEGER}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByAccount" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from member_clouds
    where ACCOUNT = #{account,jdbcType=VARCHAR}
  </select>
  <resultMap id="withdrawCashDTO" type="com.qiyun.dto.WithdrawCashDTO">
    <result column="ACCOUNT" jdbcType="VARCHAR" property="account" />
    <result column="clouds" jdbcType="INTEGER" property="clouds" />
    <result column="username" jdbcType="VARCHAR" property="userName" />
    <result column="PICTURE" jdbcType="VARCHAR" property="picture" />
  </resultMap>
  <select id="selectCashList" resultMap="withdrawCashDTO">
    SELECT
        MC.FREEZE_BALANCE AS clouds,
        M.ACCOUNT,
        M.username,
        M.PICTURE
    FROM
        member_clouds MC
    LEFT JOIN member M ON MC.ACCOUNT = M.ACCOUNT
    WHERE
        MC.FREEZE_BALANCE > 0
  </select>
  <select id="selectFAST" parameterType="java.lang.String">
    select
    FAST_Expire
    from member_clouds
    where ACCOUNT = #{account,jdbcType=VARCHAR}
  </select>
  <select id="getClounds" parameterType="java.lang.String" resultType="java.lang.Integer">
    select
    CLOUDS_ABLE_BALANCE
    from member_clouds
    where ACCOUNT = #{account,jdbcType=VARCHAR}
  </select>
</mapper>