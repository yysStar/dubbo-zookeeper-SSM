<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qiyun.mapper2.MemberTaskBeginMapper" >
  <resultMap id="BaseResultMap" type="com.qiyun.model2.MemberTaskBegin" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="periods_num" property="periodsNum" jdbcType="INTEGER" />
    <result column="task_num" property="taskNum" jdbcType="INTEGER" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="start_date" property="startDate" jdbcType="TIMESTAMP" />
    <result column="end_date" property="endDate" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="is_finish" property="isFinish" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, periods_num, task_num, account, start_date, end_date, create_time, is_finish
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.qiyun.model2.MemberTaskBeginExample" >
    select
    <if test="distinct" >
      distinct

    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from member_task_begin
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from member_task_begin
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from member_task_begin
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qiyun.model2.MemberTaskBegin" >
    insert into member_task_begin (id, periods_num, task_num, 
      account, start_date, end_date, 
      create_time, is_finish)
    values (#{id,jdbcType=INTEGER}, #{periodsNum,jdbcType=INTEGER}, #{taskNum,jdbcType=INTEGER}, 
      #{account,jdbcType=VARCHAR}, #{startDate,jdbcType=TIMESTAMP}, #{endDate,jdbcType=TIMESTAMP}, 
      #{createTime,jdbcType=TIMESTAMP}, #{isFinish,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.qiyun.model2.MemberTaskBegin" >
    insert into member_task_begin
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="periodsNum != null" >
        periods_num,
      </if>
      <if test="taskNum != null" >
        task_num,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="startDate != null" >
        start_date,
      </if>
      <if test="endDate != null" >
        end_date,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="isFinish != null" >
        is_finish,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="periodsNum != null" >
        #{periodsNum,jdbcType=INTEGER},
      </if>
      <if test="taskNum != null" >
        #{taskNum,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="startDate != null" >
        #{startDate,jdbcType=TIMESTAMP},
      </if>
      <if test="endDate != null" >
        #{endDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isFinish != null" >
        #{isFinish,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qiyun.model2.MemberTaskBegin" >
    update member_task_begin
    <set >
      <if test="periodsNum != null" >
        periods_num = #{periodsNum,jdbcType=INTEGER},
      </if>
      <if test="taskNum != null" >
        task_num = #{taskNum,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="startDate != null" >
        start_date = #{startDate,jdbcType=TIMESTAMP},
      </if>
      <if test="endDate != null" >
        end_date = #{endDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isFinish != null" >
        is_finish = #{isFinish,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qiyun.model2.MemberTaskBegin" >
    update member_task_begin
    set periods_num = #{periodsNum,jdbcType=INTEGER},
      task_num = #{taskNum,jdbcType=INTEGER},
      account = #{account,jdbcType=VARCHAR},
      start_date = #{startDate,jdbcType=TIMESTAMP},
      end_date = #{endDate,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      is_finish = #{isFinish,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectNowTask" resultMap="BaseResultMap">
    SELECT
    *
    FROM
    member_task_begin
    WHERE
    SYSDATE() > start_date
    AND SYSDATE() &lt; end_date
    AND account = #{account,jdbcType=VARCHAR}
  </select>
  <resultMap id="memberTaskBeginDTO" type="com.qiyun.dto.MemberTaskBeginDTO" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="periods_num" property="periodsNum" jdbcType="INTEGER" />
    <result column="task_num" property="taskNum" jdbcType="INTEGER" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="start_date" property="startDate" jdbcType="TIMESTAMP" />
    <result column="end_date" property="endDate" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="is_finish" property="isFinish" jdbcType="INTEGER" />
  </resultMap>
  <select id="selectAll" resultMap="memberTaskBeginDTO">
    select
    <include refid="Base_Column_List" />
    from member_task_begin
    where account = #{account,jdbcType=VARCHAR}
    ORDER BY
    create_time DESC
  </select>
  <select id="selectNowTaskAndPlan" resultMap="memberTaskBeginDTO">
    select
    <include refid="Base_Column_List" />
    from member_task_begin
    where account = #{account,jdbcType=VARCHAR}
    AND SYSDATE() > start_date
    AND SYSDATE() &lt; end_date
    ORDER BY
    create_time DESC
  </select>

  <!--<insert id="setFast" parameterType="java.lang.String">-->
    <!--insert into fast_mapping (phone, change_datetime, task_num,-->
      <!--account, start_date, end_date,-->
      <!--create_time, is_finish)-->
    <!--values (#{id,jdbcType=INTEGER}, #{periodsNum,jdbcType=INTEGER}, #{taskNum,jdbcType=INTEGER},-->
      <!--#{account,jdbcType=VARCHAR}, #{startDate,jdbcType=TIMESTAMP}, #{endDate,jdbcType=TIMESTAMP},-->
      <!--#{createTime,jdbcType=TIMESTAMP}, #{isFinish,jdbcType=INTEGER})-->
  <!--</insert>-->
</mapper>