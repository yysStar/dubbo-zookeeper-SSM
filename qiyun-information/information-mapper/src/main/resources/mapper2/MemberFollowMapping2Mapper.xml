<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qiyun.mapper2.MemberFollowMapping2Mapper" >
  <resultMap id="BaseResultMap" type="com.qiyun.model2.MemberFollowMapping2" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="fans_account" property="fansAccount" jdbcType="VARCHAR" />
    <result column="is_cancel" property="isCancel" jdbcType="BIT" />
    <result column="create_datetime" property="createDatetime" jdbcType="TIMESTAMP" />
    <result column="update_datetime" property="updateDatetime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="memberFansDTO" type="com.qiyun.dto.MemberFansDTO" >
    <result column="ACCOUNT" property="account" jdbcType="VARCHAR" />
    <result column="PICTURE" property="picture" jdbcType="VARCHAR" />
    <result column="username" property="userName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, account, fans_account, is_cancel, create_datetime, update_datetime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.qiyun.model2.MemberFollowMapping2Example" >
    select
    <if test="distinct" >
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from member_follow_mapping
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from member_follow_mapping
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from member_follow_mapping
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qiyun.model2.MemberFollowMapping2" useGeneratedKeys="true" keyProperty="id">
    insert into member_follow_mapping (id, account, fans_account, 
      is_cancel, create_datetime, update_datetime
      )
    values (#{id,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, #{fansAccount,jdbcType=VARCHAR}, 
      #{isCancel,jdbcType=BIT}, #{createDatetime,jdbcType=TIMESTAMP}, #{updateDatetime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.qiyun.model2.MemberFollowMapping2" useGeneratedKeys="true" keyProperty="id">
    insert into member_follow_mapping
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="fansAccount != null" >
        fans_account,
      </if>
      <if test="isCancel != null" >
        is_cancel,
      </if>
      <if test="createDatetime != null" >
        create_datetime,
      </if>
      <if test="updateDatetime != null" >
        update_datetime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="fansAccount != null" >
        #{fansAccount,jdbcType=VARCHAR},
      </if>
      <if test="isCancel != null" >
        #{isCancel,jdbcType=BIT},
      </if>
      <if test="createDatetime != null" >
        #{createDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDatetime != null" >
        #{updateDatetime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qiyun.model2.MemberFollowMapping2" >
    update member_follow_mapping
    <set >
      <if test="account != null" >
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="fansAccount != null" >
        fans_account = #{fansAccount,jdbcType=VARCHAR},
      </if>
      <if test="isCancel != null" >
        is_cancel = #{isCancel,jdbcType=BIT},
      </if>
      <if test="createDatetime != null" >
        create_datetime = #{createDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDatetime != null" >
        update_datetime = #{updateDatetime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qiyun.model2.MemberFollowMapping2" >
    update member_follow_mapping
    set account = #{account,jdbcType=VARCHAR},
      fans_account = #{fansAccount,jdbcType=VARCHAR},
      is_cancel = #{isCancel,jdbcType=BIT},
      create_datetime = #{createDatetime,jdbcType=TIMESTAMP},
      update_datetime = #{updateDatetime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getFollowList" resultMap="memberFansDTO">
    SELECT
        M.ACCOUNT,
        M.PICTURE,
        M.username
    FROM
        member M
    LEFT JOIN member_follow_mapping MF ON M.ACCOUNT = MF.account
    WHERE
        MF.fans_account = #{fansAccount,jdbcType=VARCHAR}
      AND is_cancel = 0
  </select>
  <select id="getFansList" resultMap="memberFansDTO">
    SELECT
        M.ACCOUNT,
        M.PICTURE,
        M.username
    FROM
        member M
    LEFT JOIN member_follow_mapping MF ON M.ACCOUNT = MF.fans_account
    WHERE
        MF.account = #{account,jdbcType=VARCHAR}
      AND is_cancel = 0
  </select>
  <select id="getByFansAccount" resultMap="BaseResultMap">
    SELECT
        *
    FROM
        member_follow_mapping
    WHERE
        account = #{account,jdbcType=VARCHAR}
    AND fans_account = #{fansAccount,jdbcType=VARCHAR}
  </select>
</mapper>